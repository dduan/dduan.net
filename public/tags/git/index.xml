<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on dduan.net</title>
    <link>http://dduan.net/tags/git/</link>
    <description>Recent content in Git on dduan.net</description>
    <generator>Hugo -- gohugo.io</generator>
    
    
    
    
    <lastBuildDate>Sun, 29 Sep 2013 15:50:50 -0600</lastBuildDate>
    <atom:link href="http://dduan.net/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Generating Xcode Build Number From Git</title>
      <link>http://dduan.net/post/2013/09/generating-xcode-build-number-from-git/</link>
      <pubDate>Sun, 29 Sep 2013 15:50:50 -0600</pubDate>
      
      <guid>http://dduan.net/post/2013/09/generating-xcode-build-number-from-git/</guid>
      <description>&lt;p&gt;The build version number in an Xcode project (CFBundleVersion in Info.plist)
must be a monotonically increasing string for each archive submitted to the
App Store. Neglection of this requirement will result in an error during the
binary upload. Some automation will help avoiding this issue.&lt;/p&gt;

&lt;p&gt;First, we want to generate this version number from our version (&lt;em&gt;duh&lt;/em&gt;)
control system (VCS) each time our target gets built. My VCS of choice is Git,
users of other systems just need to get a increasing number from their code
history. On a *nix system, this command will count the number of commits on
&amp;lsquo;develop&amp;rsquo; branch up until HEAD:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    git rev-list develop | wc -l
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a very good candidate for our build number, for longer history
generally correlates to later builds.&lt;/p&gt;

&lt;p&gt;Next, we make Xcode automatically run this command and use its result as the
build number.&lt;/p&gt;

&lt;p&gt;Go to project navigator, select your build target under the project icon,
click &lt;em&gt;Build Phases&lt;/em&gt;, select &lt;em&gt;Editor→Add Build Phase→Add Run Script Build
Phase&lt;/em&gt; in the menu. Remove the content in editor of the new &lt;em&gt;Run Script&lt;/em&gt;
phase and replace it with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;revnum=`git rev-list develop | wc -l`
echo &amp;quot;#define BUILD_NUMBER $revnum&amp;quot; &amp;gt; InfoPlist.h
touch InfoPlist.h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go to build settings, change value of &lt;em&gt;Preprocess Info.plist File&lt;/em&gt; to &amp;ldquo;YES&amp;rdquo;.
Add &amp;ldquo;InfoPlist.h&amp;rdquo; to &lt;em&gt;Info.plist Preprocessor Prefix File→release&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We ask Xcode to run our command and save its result as a &amp;ldquo;#define&amp;rdquo; in a header
file when it builds the project. This is done so that we can replace the
&amp;ldquo;hardcoded&amp;rdquo; build number with the name of the constant:&lt;/p&gt;

&lt;p&gt;Open Info.plist, Double click the value of &lt;em&gt;Bundle Version&lt;/em&gt; and replace it with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BUILD_NUMBER
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s only one issue left: &lt;code&gt;BUILD_NUMBER&lt;/code&gt; is now saved in &lt;em&gt;InfoPlist.h&lt;/em&gt;. Its
value comes from our commit history. So we want to exclude this piece of
information as part of our commit history (I&amp;rsquo;ll leave the reason as an exercise
for the reader). Ignore this file by adding &amp;ldquo;InfoPlist.h&amp;rdquo; to &lt;em&gt;.gitignore&lt;/em&gt; (or
that of your other VCS).&lt;/p&gt;

&lt;p&gt;To recap, when you build the project now, Xcode will find out how many commits
are in the history, define it in a header file as &lt;code&gt;BUILD_NUMBER&lt;/code&gt;, which gets
used as the build number. As long as you keep with with version control, the
build number problem goes away.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Keep Git Social</title>
      <link>http://dduan.net/post/2012/10/keep-git-social/</link>
      <pubDate>Wed, 31 Oct 2012 10:02:30 -0600</pubDate>
      
      <guid>http://dduan.net/post/2012/10/keep-git-social/</guid>
      <description>&lt;p&gt;&lt;em&gt;A project I&amp;rsquo;m working on uses &lt;a href=&#34;http://gitlabhq.com&#34;&gt;GitlabHQ&lt;/a&gt;, I think it is a cool open source
project and the developers are doing an excellent job of making a sweet web
interface for Git projects. However, as I found out today, &lt;a href=&#34;https://github.com/gitlabhq/gitlabhq/issues/1298&#34; title=&#34;Gitlab Issue: Closed&#34;&gt;my one issue&lt;/a&gt;
with it was closed without fixing. And that&amp;rsquo;s what finally propelled me to
writing this airticle.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Do you know, the Linux kernel is broken by hundreds of commited patches
everyday?&lt;/p&gt;

&lt;p&gt;That, of course, is a trick question. Yes, &lt;em&gt;technically&lt;/em&gt;, hundreds (if not
thousands) of patches were commited to &lt;em&gt;a&lt;/em&gt; git repository of the Linux kernel
that isn&amp;rsquo;t different in anyway from &lt;em&gt;the&lt;/em&gt; repository. What makes the
repository &amp;ldquo;conanical&amp;rdquo; is the fact that Linus Torvalds owns it. If the world
lost access to his hard drive because Linus was hit by a bus (I would never
wish this to happen) today, all the Linux community need to do is figure out
who is next BDFL. Then his/hers would become &lt;em&gt;the&lt;/em&gt; Linux repository.&lt;/p&gt;

&lt;p&gt;In other words, what makes the difference is purely social.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Not trying to fit the social structure of a software project into a
repository is the biggest strength of git.&lt;/strong&gt; This is why I frown everytime
I see a discussion about locking down branches of a Git repository.&lt;/p&gt;

&lt;p&gt;Making developers &amp;ldquo;own&amp;rdquo; branches on a shared repository is a pratice
inheritated from the days of centralized version control. Git doesn&amp;rsquo;t provide
built-in support for this, for good reasons.&lt;/p&gt;

&lt;p&gt;With Subversion, the ultimate goal of branch-wise access control is to keep out
bad changes made by developers while give them the benefits of version
control, namely:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;provide a backup of the change history&lt;/li&gt;
&lt;li&gt;let others to follow his/her progress so that they can contribute via
patches or collaborate if they have write access.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With Git, these are easily achieved by a personal repository read-accessible
for the team.&lt;/p&gt;

&lt;p&gt;Meanwhile, write access is granted at the repository level, but only to very
few or, more preferably, one person. This is possible because each team member
can have and only push to his/her own repositories. No change made by others
will make their way to the &amp;ldquo;conanical&amp;rdquo; repository unless its owner(s) activaly
pulls them in. Bad changes therefore is kept out.&lt;/p&gt;

&lt;p&gt;Additionally, Git has &lt;a href=&#34;http://git-scm.com/book/en/Git-Branching&#34;&gt;features&lt;/a&gt; flexible enough to
support all kinds of &lt;a href=&#34;http://nvie.com/posts/a-successful-git-branching-model&#34;&gt;development process&lt;/a&gt;es, partially because
its branches, by design, are not responsible for enforcing access
permissions.&lt;/p&gt;

&lt;p&gt;Consider developer John working on a shared git repository with
locked branches: where would he push his temporary branch to for backup,
if he can only write to &lt;code&gt;feature42&lt;/code&gt; and &lt;code&gt;johns_branch&lt;/code&gt;? How does he get
&lt;code&gt;emergency_bugfix_14159&lt;/code&gt; pair reviewed at 4am? If he uses his own repo
for those, does it mean he has to force the whole team to know about it?
How does it affect work when a &lt;code&gt;git branch --all&lt;/code&gt; produces a phone book?&lt;/p&gt;

&lt;p&gt;Break Git&amp;rsquo;s design gets you no where nice.&lt;/p&gt;

&lt;p&gt;And no, Git&amp;rsquo;s social model doesn&amp;rsquo;t add work to the owner of the &amp;ldquo;official&amp;rdquo;
repository. Afterall, Git was designed with he linux kernel in mind!
Linus himself explains it the best (summary provided below):&lt;/p&gt;

&lt;iframe width=&#34;420&#34; height=&#34;315&#34;
src=&#34;http://www.youtube.com/embed/4XpnKHJAok8&#34;
frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;In short, Linus only review pull requests from a few &amp;ldquo;lieutenants&amp;rdquo; he
trusts, and they each follow the same process with their trusted few.
And the pyramid trickles all the way down. Here agian, Git solves a
problem by getting out of the way of the project&amp;rsquo;s social stucture,
instead of trying to encapsulate it.&lt;/p&gt;

&lt;p&gt;Git was the first version control system I&amp;rsquo;ve ever used starting in 2008.
I&amp;rsquo;ve since gradually realized that not everyone is lucky like me, in the
sense that svn has been working just fine for a lot of people. When their
project switches to Git, emulating the svn/old workflow with functionality
provided by projects like &lt;code&gt;gitolite&lt;/code&gt; is only natural. But if you are one of
them, and want more creativity from your team, perhaps embracing the
social aspect of Git by breaking the shackles on their hand is a good thing
to try.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>