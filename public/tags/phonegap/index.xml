<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Phonegap on dduan.net</title>
    <link>http://dduan.net/tags/phonegap/</link>
    <description>Recent content in Phonegap on dduan.net</description>
    <generator>Hugo -- gohugo.io</generator>
    
    
    
    
    <lastBuildDate>Tue, 28 May 2013 15:24:30 -0600</lastBuildDate>
    <atom:link href="http://dduan.net/tags/phonegap/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Sencha Touch 2 and PhoneGap integration</title>
      <link>http://dduan.net/post/2013/05/sencha-touch-2-and-phonegap-integration/</link>
      <pubDate>Tue, 28 May 2013 15:24:30 -0600</pubDate>
      
      <guid>http://dduan.net/post/2013/05/sencha-touch-2-and-phonegap-integration/</guid>
      <description>&lt;p&gt;As one of my pet Sencha Touch project gets close to finish, I started
looking into distribute it as native apps with Phonegap/Cordova.&lt;/p&gt;

&lt;p&gt;One of the concerns in do so is the &amp;lsquo;deviceready&amp;rsquo; event provided by Phonegap,
according to the documentation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is a very important event that every Cordova application should use.&lt;br /&gt;
&amp;hellip;&lt;/p&gt;

&lt;p&gt;The Cordova deviceready event fires once Cordova has fully loaded.
After the device has fired, you can safely make calls to Cordova function.&lt;/p&gt;

&lt;p&gt;Typically, you will want to attach an event listener with
document.addEventListener once the HTML document&amp;rsquo;s DOM has loaded.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In particular, the nice Sencha Touch microloader complicate the matter by
being the sole Javascript file that&amp;rsquo;s supposed to be included in &lt;code&gt;index.html&lt;/code&gt;
and is in charge of starting the actual code of our apps. Yet we need the
starting point of the code be a response to the &lt;code&gt;deviceready&lt;/code&gt; event.&lt;/p&gt;

&lt;p&gt;After some googling, I found that most information on this matter is either
inaccurate, incomplete or outdated, that is until I found &lt;a href=&#34;http://stackoverflow.com/a/10457158/243798&#34;&gt;this answer&lt;/a&gt; by
&lt;a href=&#34;http://dougan.me&#34;&gt;Robert Dougan&lt;/a&gt; on StackOverflow:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Sencha Touch 2 will listen to that event and call your onReady/launch methods
- therefore if you try listening to them in the launch method,
it has already been fired.&lt;/p&gt;

&lt;p&gt;Just put your logic inside the launch method in your application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To verify this claim, I dug into &lt;code&gt;sencha-touch-debug.js&lt;/code&gt; distributed with
Sencha Touch 2.2 and found the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (Ext.browser.is.PhoneGap &amp;amp;&amp;amp; !Ext.os.is.Desktop) {
    if (!Ext.readyListenerAttached) {
        Ext.readyListenerAttached = true;
        document.addEventListener(&#39;deviceready&#39;, triggerFn, false);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It appears that the &lt;code&gt;deviceready&lt;/code&gt; event is taken into account here as long as
&lt;code&gt;Ext.browser.is.PhoneGap&lt;/code&gt; is true in a mobile browser envronment, which, in the
same source code, means:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (typeof window.PhoneGap != &#39;undefined&#39; ||
    typeof window.Cordova != &#39;undefined&#39;  ||
    typeof window.cordova != &#39;undefined&#39;) {
    isWebView = true;
    this.setFlag(&#39;PhoneGap&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, the global variable PhoneGap, cordova or Cordova needs to be defined to
satisfy Sencha Touch 2&amp;rsquo;s expectation of PhoneGap environment. Those globals
are defined in the &lt;code&gt;cordova-x.y.x.js&lt;/code&gt; file included in the PhoneGap/Cordova
project files.&lt;/p&gt;

&lt;p&gt;So what needs to be done for the integration is simple (if not clear):&lt;/p&gt;

&lt;p&gt;include &lt;code&gt;cordova-x.y.x.js&lt;/code&gt; in the js section of &lt;code&gt;app.json&lt;/code&gt; project file so that
the microloader knows to load it up early:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;js&amp;quot;: [
    {
        &amp;quot;path&amp;quot;: &amp;quot;path/to/cordova-x.y.z.js&amp;quot;,
    },
    {
        &amp;quot;path&amp;quot;: &amp;quot;touch/sencha-touch.js&amp;quot;,
        &amp;quot;x-bootstrap&amp;quot;: true
    },
    {
        &amp;quot;path&amp;quot;: &amp;quot;app.js&amp;quot;,
        &amp;quot;bundle&amp;quot;: true, 
        &amp;quot;update&amp;quot;: &amp;quot;delta&amp;quot;
    }
],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run &lt;code&gt;sencha app build package&lt;/code&gt; and drop the files it produces to the &lt;code&gt;www&lt;/code&gt;
folder in the PhoneGap project.&lt;/p&gt;

&lt;p&gt;Compile, ship.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Integrating Sencha Touch 2 and Cordova (pre-2.0)</title>
      <link>http://dduan.net/post/2012/08/integrating-sencha-touch-2-and-cordova-pre-20/</link>
      <pubDate>Mon, 20 Aug 2012 19:09:34 -0600</pubDate>
      
      <guid>http://dduan.net/post/2012/08/integrating-sencha-touch-2-and-cordova-pre-20/</guid>
      <description>

&lt;h2 id=&#34;the-goals:ae823e1ecb8b3019ca89a6317b5cc1cd&#34;&gt;&amp;ldquo;The Goals&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Use Sencha Command to create and package an MVC-structured Sencha Touch 2
project.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use Cordova/PhoneGap (1.9) to wrap the project to deliver it in the App
Store.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Leverage the APIs provided by Cordova/PhoneGap to give Sencha Touch 2
project more native capabilities.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;the-process:ae823e1ecb8b3019ca89a6317b5cc1cd&#34;&gt;The Process&lt;/h2&gt;

&lt;p&gt;Goal #1 and #2 can be achieved by &lt;a href=&#34;http://robertdougan.com/posts/packaging-sencha-touch-2-with-phonegap-cordova&#34; title=&#34;&amp;quot;Packaging Sencha Touch 2 with PhoneGap (Cordova)&amp;quot;&amp;quot;&#34;&gt;these steps well described by Robert Dougan
&lt;/a&gt;. In essence, you need to create a normal Sencha Touch 2 project
using Sencha Command; a Cordova (1.7 in Roberts post, but works fine with 1.9)
project. Then tell Sencha Command to build in the &lt;code&gt;www&lt;/code&gt; folder, where Cordova
looks for the HTML5 assets to package. Finally, build and deploy the Cordova
project the usual way.&lt;/p&gt;

&lt;p&gt;That, of course, is not the end of the story, otherwise you wouldn&amp;rsquo;t be
reading this. When you try to achive goal #3, that is, when you use the
Cordova API in the Sencha Touch project, such as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    navigator.notification.alert(
        &#39;Winter is coming!&#39;,
        noted, // callback function
        &#39;be warned&#39;,
        &amp;quot;&amp;quot;Yes M&#39;lord&amp;quot;&amp;quot;
    );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sencha Command will report error and refuse to &amp;ldquo;&amp;ldquo;compile&amp;rdquo;&amp;rdquo; if you run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sencha app build package
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;because of the unknown namespace introduced by Cordova.&lt;/p&gt;

&lt;p&gt;One way to workaround this problem is manually replacing the command, which
involves compiling the SASS files, consolidate all Javascript dependencies
into a single file, minify everything and move the result to the &lt;code&gt;www&lt;/code&gt;
folder.&lt;/p&gt;

&lt;p&gt;Doesn&amp;rsquo;t sound fun, does it?&lt;/p&gt;

&lt;p&gt;So, here&amp;rsquo;s a trick to put Sencha Command back on track, use&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    if (!Ext.os.is.Desktop) {
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to wrap around the Cordova API calls, so the previous example becomes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    if (!Ext.os.is.Desktop) {
        navigator.notification.alert(
            // ...
        );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This way, Sencha Command will ignore the conditioned code block since its
running on the desktop environment, therefore compiles like a charm. And the
code will work as intended in emulator/device environment.&lt;/p&gt;

&lt;p&gt;You are welcome.&lt;/p&gt;

&lt;h2 id=&#34;the-bonus:ae823e1ecb8b3019ca89a6317b5cc1cd&#34;&gt;The Bonus&lt;/h2&gt;

&lt;p&gt;Now that you are using Sencha Touch 2 and Cordova API (like a boss!), here&amp;rsquo;s
another tip to improve your workflow. When I&amp;rsquo;m developing hybrid apps, I spend
the majority of time editing Java(Coffee)script/(S)CSS files. But surely
enough, there will come a period where I have to debug the packaged app in the
emulator. Switching from my text editor (Vim) to XCode and hitting âŒ˜r
REALLY gets old.&lt;/p&gt;

&lt;p&gt;Luckily, Cordova provides some command line alternatives. If
you generate a Cordova project as described in
&lt;a href=&#34;http://docs.phonegap.com/en/2.0.0/guide_command-line_index.md.html#Command-Line%20Usage&#34; title=&#34;&amp;quot;Cordova Command-Line Documentaion&amp;quot;&#34;&gt;Cordova&amp;rsquo;s documentaion&lt;/a&gt; like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./path/to/cordova-ios/bin/create /path/to/project com.example.name Project
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;ll be a folder called &lt;code&gt;cordova&lt;/code&gt; in the newly created project, which won&amp;rsquo;t
be in your project if you create it with XCode with &lt;a href=&#34;http://robertdougan.com/posts/packaging-sencha-touch-2-with-phonegap-cordova&#34; title=&#34;&amp;quot;Packaging Sencha Touch 2 with PhoneGap (Cordova)&amp;quot;&amp;quot;&#34;&gt;Robert&amp;rsquo;s method&lt;/a&gt;.
In &lt;code&gt;cordova&lt;/code&gt; folder are three lovely Bash scripts that let&amp;rsquo;s you compile the
XCode project (&lt;code&gt;debug&lt;/code&gt;, which also does the next thing), run the result in  an
ios emulator (&lt;code&gt;emulate&lt;/code&gt;) and watch the logging information (&lt;code&gt;log&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Copy the folder to the path of &lt;code&gt;YourProject.xcodeproj&lt;/code&gt;, and boom! You can now
quit XCode and run the scripts in there directly from your terminal. (What I like to
do is to use GNU Make to combine Sencha commands with those scripts so that
I could just hit âŒ˜b in MacVim to make my latest code run in the simulator.)&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>