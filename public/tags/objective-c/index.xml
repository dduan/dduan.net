<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Objective C on dduan.net</title>
    <link>http://dduan.net/tags/objective-c/</link>
    <description>Recent content in Objective C on dduan.net</description>
    <generator>Hugo -- gohugo.io</generator>
    
    
    
    
    <lastBuildDate>Sat, 07 Feb 2015 20:35:02 PST</lastBuildDate>
    <atom:link href="http://dduan.net/tags/objective-c/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Build And Run iOS Apps In Commmand Line</title>
      <link>http://dduan.net/post/2015/02/build-and-run-ios-apps-in-commmand-line/</link>
      <pubDate>Sat, 07 Feb 2015 20:35:02 PST</pubDate>
      
      <guid>http://dduan.net/post/2015/02/build-and-run-ios-apps-in-commmand-line/</guid>
      <description>&lt;p&gt;Xcode is slow. Enough said. What&amp;rsquo;s worse, sometimes I find myself
relying too much on auto-completion with Cocoa Touch, a blessing and a curse!&lt;/p&gt;

&lt;p&gt;So I searched for an alternative workflow in command line. The result was
rather confusing: there are posts about using &lt;code&gt;xctool&lt;/code&gt; or &lt;code&gt;xcodebuild&lt;/code&gt; to
build Xcode targets, using &lt;code&gt;ios-sim&lt;/code&gt;, &lt;code&gt;simctl&lt;/code&gt;  or &lt;code&gt;instruments&lt;/code&gt; to manage and
manage or launch simulators. Most of the information is out of date.&lt;/p&gt;

&lt;p&gt;Eventually though, I was able to piece together an answer for my needs.
That is, given an iOS project set up with Xcode 6, I want to&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;build a target.&lt;/li&gt;
&lt;li&gt;launch a iOS simulator.&lt;/li&gt;
&lt;li&gt;install the built .app bundle to the launched simulator.&lt;/li&gt;
&lt;li&gt;run the installed app.&lt;/li&gt;
&lt;li&gt;uninstall the app from the simulator.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All in command line, with Xcode &lt;em&gt;closed&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Before we proceed to the steps, you need to gather a few pieces of information:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;the Xcode build scheme of your choice (e.g. &amp;ldquo;AwesomeApp&amp;rdquo;).&lt;/li&gt;
&lt;li&gt;your app bundle ID (e.g. &amp;ldquo;com.awesome.app&amp;rdquo;).&lt;/li&gt;
&lt;li&gt;name of an existing simulator (e.g. &amp;ldquo;iPhone 6 Plus&amp;rdquo;). If you don&amp;rsquo;t want to
look it up in Xcode GUI, look for it in output of command &lt;code&gt;xcrun simctl
list&lt;/code&gt; .&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ready? Here we go.&lt;/p&gt;

&lt;p&gt;(These commands should be run in the project folder).&lt;/p&gt;

&lt;p&gt;Build the target:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xcodebuild -scheme AwesomeApp -destination &#39;platform=iphonesimulator,name=iPhone 6 Plus&#39; -derivedDataPath build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Launch the simulator:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xcrun instruments -w &#39;iPhone 6 Plus&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install the bundle (after simulator is launched and target is built with
previous commands):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xcrun simctl install booted build/Build/Products/Debug-iphonesimulator/AwesomeApp.app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Launch the app in simulator (after it&amp;rsquo;s installed with the previous command):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xcrun simctl launch booted com.awesome.app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Uninstall the bundle:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xcrun simctl uninstall booted com.awesome.app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quite a few parameters needs to be added for the build step if you have
a comlex project. Please RTFMs. Write some script to automate the steps, if
are a lazy typiest like me.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>