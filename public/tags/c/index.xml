<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on dduan.net</title>
    <link>http://dduan.net/tags/c/</link>
    <description>Recent content in C on dduan.net</description>
    <generator>Hugo -- gohugo.io</generator>
    
    
    
    
    <lastBuildDate>Sun, 01 Nov 2015 11:18:40 PST</lastBuildDate>
    <atom:link href="http://dduan.net/tags/c/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>char ** in Swift</title>
      <link>http://dduan.net/post/2015/11/char-star-star-in-swift/</link>
      <pubDate>Sun, 01 Nov 2015 11:18:40 PST</pubDate>
      
      <guid>http://dduan.net/post/2015/11/char-star-star-in-swift/</guid>
      <description>&lt;p&gt;A &amp;ldquo;string&amp;rdquo; in C is just a continuous chunk of &lt;code&gt;char&lt;/code&gt; values in memory with
&lt;code&gt;\0&lt;/code&gt; at the end. To reference it, a variable of type &lt;code&gt;char *&lt;/code&gt; is used to store
the address of the first &lt;code&gt;char&lt;/code&gt; (commonly known as a pointer ðŸ˜‰).  It&amp;rsquo;s common
to have string manipulating functions take this form:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void foo(char **errorMessage) { // ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To mutate the arugment &lt;code&gt;errorMessage&lt;/code&gt; of type &lt;code&gt;char *&lt;/code&gt;, &lt;code&gt;foo&lt;/code&gt; takes a pointer
to it, &lt;code&gt;(char *)*&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;How do we call &lt;code&gt;foo&lt;/code&gt; in Swift?&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the tl;dr. We can wrap it in a Swift function that have the same
interface:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func fooSwift(inout errorMessage: String?) {
    var message: UnsafeMutablePointer&amp;lt;CChar&amp;gt; = nil

    foo(&amp;amp;message)
    errorMessage = String.fromCString(message)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;errorMessage&lt;/code&gt; will contain whatever our C function &lt;code&gt;foo&lt;/code&gt; assigns to it.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So, what&amp;rsquo;s really going on here?&lt;/p&gt;

&lt;p&gt;Inspecting &lt;code&gt;foo&lt;/code&gt;&amp;rsquo;s signature in Swift, we see&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func foo(errorMessage: UnsafeMutablePointer&amp;lt;UnsafeMutablePointer&amp;lt;CChar&amp;gt;&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;â€¦ okey, &lt;code&gt;errorMessage&lt;/code&gt;&amp;rsquo;s type is little intimidating to someone who doesn&amp;rsquo;t
use C functions in Swift everyday (like me)!&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s break it down. Swift does a ton of work for us to interoperate with C:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;CChar&lt;/code&gt; is Swift&amp;rsquo;s name for &lt;em&gt;&lt;code&gt;char&lt;/code&gt; in C&lt;/em&gt; (shocking, amiright?)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;UnsafeMutablePointer&amp;lt;Type&amp;gt;&lt;/code&gt; roughly translates to &lt;code&gt;Type *&lt;/code&gt;, so
syntactically, we can see why
&lt;code&gt;UnsafeMutablePointer&amp;lt;UnsafeMutablePointer&amp;lt;CChar&amp;gt;&amp;gt;&lt;/code&gt; is used to bridge the
C type &lt;code&gt;(char *)*&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A function that takes &lt;code&gt;UnsafeMutablePointer&amp;lt;Type&amp;gt;&lt;/code&gt; argument accepts
&lt;code&gt;inout Type&lt;/code&gt; values. Therefore, we can look at &lt;code&gt;foo&lt;/code&gt; as&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foo(inout errorMessage: UnsafeMutablePointer&amp;lt;CChar&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Swift acknowledge C&amp;rsquo;s string representation and provides convenient
methods for converting &lt;code&gt;char *&lt;/code&gt; / &lt;code&gt;UnsafeMutablePointer&amp;lt;CChar&amp;gt;&lt;/code&gt; to its own
&lt;code&gt;String&lt;/code&gt; type (&lt;code&gt;String.fromCString()&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hopefully you can see how &lt;code&gt;fooSwift&lt;/code&gt; works now.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Taking a step back, to deal with &lt;code&gt;char **&lt;/code&gt; in Swift, we overcame 2 obstacles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The difference in string representation between C and Swift.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Compared to C pointers, Swift&amp;rsquo;s &lt;code&gt;inout&lt;/code&gt; expresses mutability of function
arguments in a more restricted way. We can&amp;rsquo;t nest &lt;code&gt;inout&lt;/code&gt;s to represent
the infinite layers of indirections that pointers achieve.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>