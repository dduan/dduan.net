<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Daniel Duan - Foundation</title>
        <link>https://duan.ca/tag/Foundation/</link>
        <atom:link href="https://duan.ca/tag/Foundation/index.xml" rel="self" type="application/rss+xml" />
        
        
            
            <item>
                <title>Supporting Foundation.Data Without Depending On It</title>
                <description>&lt;p&gt;While implementing some file I/O APIs in &lt;a href=&quot;https://github.com/dduan/Pathos&quot;&gt;Pathos&lt;/a&gt;, I decided reading/writing
file content as &lt;code class=&quot;highlighter-rouge&quot;&gt;Foundation.Data&lt;/code&gt; is kind of important (can you blame me?). But
Pathos, by accident&lt;a class=&quot;backlink&quot; rel=&quot;canonical&quot; title=&quot;From duan.ca&quot; href=https://duan.ca/2018/08/18/supporting-data-without-depending-on-it/&gt;,&lt;/a&gt; does not depend on Swift &lt;code class=&quot;highlighter-rouge&quot;&gt;Foundation&lt;/code&gt;. Now what?&lt;/p&gt;

&lt;p&gt;After browsing the &lt;a href=&quot;https://developer.apple.com/documentation/foundation/data&quot;&gt;documentation&lt;/a&gt;, a pretty good solution emerged: &lt;code class=&quot;highlighter-rouge&quot;&gt;Data&lt;/code&gt; is
a sequence of bytes! Lets say we hand our users some bytes, they can easily
construct a &lt;code class=&quot;highlighter-rouge&quot;&gt;Data&lt;/code&gt; from it:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UInt8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromPath&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/tmp/test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Okay, so this built-in initializer makes &lt;code class=&quot;highlighter-rouge&quot;&gt;[UInt8]&lt;/code&gt; an acceptable substitute for
returning &lt;code class=&quot;highlighter-rouge&quot;&gt;Data&lt;/code&gt;. What can we do about about &lt;code class=&quot;highlighter-rouge&quot;&gt;Data&lt;/code&gt; as input? Well, turns out,
&lt;code class=&quot;highlighter-rouge&quot;&gt;Data&lt;/code&gt; is a &lt;code class=&quot;highlighter-rouge&quot;&gt;Collection&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;UInt8&lt;/code&gt;s! So we can accept &lt;code class=&quot;highlighter-rouge&quot;&gt;Data&lt;/code&gt; indirectly like
so:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Bytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UInt8&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// blah&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;User can pass in a &lt;code class=&quot;highlighter-rouge&quot;&gt;Data&lt;/code&gt; as argument and it just worksâ„¢.&lt;/p&gt;

&lt;p&gt;The only disadvantage of supporting &lt;code class=&quot;highlighter-rouge&quot;&gt;Data&lt;/code&gt; in these ways is that it requires
your user to discover it either via your excellent documentation, or through
their super good knowledge of &lt;code class=&quot;highlighter-rouge&quot;&gt;Foundation&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But this is pretty nice, regardless.&lt;/p&gt;

</description>
                <pubDate>Sat, 18 Aug 2018 11:00:41 -0700</pubDate>
                
                <link>https://duan.ca/2018/08/18/supporting-data-without-depending-on-it/</link>
                
                <guid isPermaLink="true">https://duan.ca/2018/08/18/supporting-data-without-depending-on-it/</guid>
            </item>
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
            <item>
                <title>Contributing To Open-Source Swift</title>
                <description>&lt;p&gt;I discover, report&lt;a class=&quot;backlink&quot; rel=&quot;canonical&quot; title=&quot;From duan.ca&quot; href=https://duan.ca/2017/12/23/contributing-to-open-source-foundation/&gt;,&lt;/a&gt; fix and merge a bug in the open-source Foundation project. And why, yes, on YouTube.&lt;/p&gt;

&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/rwuj80W8TtI&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Pull request: &lt;a href=&quot;https://github.com/apple/swift-corelibs-foundation/pull/1376&quot;&gt;https://github.com/apple/swift-corelibs-foundation/pull/1376&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;SR-6647: &lt;a href=&quot;https://bugs.swift.org/browse/SR-6647&quot;&gt;https://bugs.swift.org/browse/SR-6647&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Sat, 23 Dec 2017 13:21:10 -0800</pubDate>
                
                <link>https://duan.ca/2017/12/23/contributing-to-open-source-foundation/</link>
                
                <guid isPermaLink="true">https://duan.ca/2017/12/23/contributing-to-open-source-foundation/</guid>
            </item>
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
    </channel>
</rss>
