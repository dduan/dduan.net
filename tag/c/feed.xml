<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Daniel Duan - C</title>
        <link>https://duan.ca/tag/C/</link>
        <atom:link href="https://duan.ca/tag/C/index.xml" rel="self" type="application/rss+xml" />
        
        
            
        
            
        
            
        
            
            <item>
                <title>Building 'pwd' Under 1 Minute In Swift</title>
                <description>&lt;p&gt;I guess I‚Äôm starting a series of minute-long videos. In this first video, I built &lt;code class=&quot;highlighter-rouge&quot;&gt;pwd&lt;/code&gt; out of &lt;code class=&quot;highlighter-rouge&quot;&gt;getcwd&lt;/code&gt;. The
code turned out shorter than I imagined (1 line). Which is a good demonstration of Swift‚Äôs great C-interop
capability.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/YR4MCcMnHrI&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Some details are lost in this video&lt;a class=&quot;backlink&quot; rel=&quot;canonical&quot; title=&quot;From duan.ca&quot; href=https://duan.ca/2017/12/27/building-pwd-under-1-minute-in-swift/&gt;,&lt;/a&gt; however. For example, the POSIX standard actually says &lt;code class=&quot;highlighter-rouge&quot;&gt;getcwd&lt;/code&gt;‚Äôs 2nd
argument being &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; is undefined. Luckily, both macOS and Linux define it the way we want (allocate as much
memory as needed). Swift‚Äôs handling of &lt;code class=&quot;highlighter-rouge&quot;&gt;char *&lt;/code&gt; aka &lt;code class=&quot;highlighter-rouge&quot;&gt;UnsafeMutablePointer&amp;lt;CChar&amp;gt;&lt;/code&gt; in context of a &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; array
is also very cool.&lt;/p&gt;
</description>
                <pubDate>Wed, 27 Dec 2017 01:13:07 -0800</pubDate>
                
                <link>https://duan.ca/2017/12/27/building-pwd-under-1-minute-in-swift/</link>
                
                <guid isPermaLink="true">https://duan.ca/2017/12/27/building-pwd-under-1-minute-in-swift/</guid>
            </item>
            
        
            
        
            
        
            
        
            
        
            
        
            
            <item>
                <title>Swift And C Everything You Need to Know on Types, Pointers and more</title>
                <description>&lt;p&gt;This is an article I wish I had writen. It has everything about Swift and C&lt;a class=&quot;backlink&quot; rel=&quot;canonical&quot; title=&quot;From duan.ca&quot; href=https://duan.ca/linked/2017/12/c-and-swift/&gt;,&lt;/a&gt; as stated in the title. It‚Äôs
going to be a useful reference to me. I also wish I‚Äôd discovered it earlier.&lt;/p&gt;

&lt;p&gt;Follow the author &lt;a href=&quot;https://twitter.com/uraimo&quot;&gt;Umberto Raimondi&lt;/a&gt; on Twitter!&lt;/p&gt;

</description>
                <pubDate>Mon, 11 Dec 2017 17:36:34 -0800</pubDate>
                
                <link>https://www.uraimo.com/2016/04/07/swift-and-c-everything-you-need-to-know/</link>
                
                <guid isPermaLink="true">https://duan.ca/linked/2017/12/c-and-swift/</guid>
            </item>
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
            <item>
                <title>char ** in Swift</title>
                <description>&lt;p&gt;A ‚Äústring‚Äù in C is just a continuous chunk of &lt;code class=&quot;highlighter-rouge&quot;&gt;char&lt;/code&gt; values in memory with
&lt;code class=&quot;highlighter-rouge&quot;&gt;\0&lt;/code&gt; at the end. To reference it, a variable of type &lt;code class=&quot;highlighter-rouge&quot;&gt;char *&lt;/code&gt; is used to store
the address of the first &lt;code class=&quot;highlighter-rouge&quot;&gt;char&lt;/code&gt; (commonly known as a pointer üòâ).  It‚Äôs common
to have string manipulating functions take this form:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errorMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To mutate the arugment &lt;code class=&quot;highlighter-rouge&quot;&gt;errorMessage&lt;/code&gt; of type &lt;code class=&quot;highlighter-rouge&quot;&gt;char *&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; takes a pointer
to it, &lt;code class=&quot;highlighter-rouge&quot;&gt;(char *)*&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;How do we call &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; in Swift?&lt;/p&gt;

&lt;p&gt;Here‚Äôs the tl;dr. We can wrap it in a Swift function that have the same
interface:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fooSwift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;inout&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;errorMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UnsafeMutablePointer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CChar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;errorMessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fromCString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;errorMessage&lt;/code&gt; will contain whatever our C function &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; assigns to it.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So, what‚Äôs really going on here?&lt;/p&gt;

&lt;p&gt;Inspecting &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt;‚Äôs signature in Swift, we see&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;errorMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UnsafeMutablePointer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UnsafeMutablePointer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CChar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;‚Ä¶ okey, &lt;code class=&quot;highlighter-rouge&quot;&gt;errorMessage&lt;/code&gt;‚Äôs type is little intimidating to someone who doesn‚Äôt
use C functions in Swift everyday (like me)!&lt;/p&gt;

&lt;p&gt;Let‚Äôs break it down. Swift does a ton of work for us to interoperate with C:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CChar&lt;/code&gt; is Swift‚Äôs name for &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;char&lt;/code&gt; in C&lt;/em&gt; (shocking, amiright?)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UnsafeMutablePointer&amp;lt;Type&amp;gt;&lt;/code&gt; roughly translates to &lt;code class=&quot;highlighter-rouge&quot;&gt;Type *&lt;/code&gt;&lt;a class=&quot;backlink&quot; rel=&quot;canonical&quot; title=&quot;From duan.ca&quot; href=https://duan.ca/2015/11/01/char-star-star-in-swift/&gt;,&lt;/a&gt; so
syntactically, we can see why
&lt;code class=&quot;highlighter-rouge&quot;&gt;UnsafeMutablePointer&amp;lt;UnsafeMutablePointer&amp;lt;CChar&amp;gt;&amp;gt;&lt;/code&gt; is used to bridge the
C type &lt;code class=&quot;highlighter-rouge&quot;&gt;(char *)*&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A function that takes &lt;code class=&quot;highlighter-rouge&quot;&gt;UnsafeMutablePointer&amp;lt;Type&amp;gt;&lt;/code&gt; argument accepts
&lt;code class=&quot;highlighter-rouge&quot;&gt;inout Type&lt;/code&gt; values. Therefore, we can look at &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; as&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;foo(inout errorMessage: UnsafeMutablePointer&amp;lt;CChar&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Swift acknowledge C‚Äôs string representation and provides convenient
methods for converting &lt;code class=&quot;highlighter-rouge&quot;&gt;char *&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;UnsafeMutablePointer&amp;lt;CChar&amp;gt;&lt;/code&gt; to its own
&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; type (&lt;code class=&quot;highlighter-rouge&quot;&gt;String.fromCString()&lt;/code&gt;).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hopefully you can see how &lt;code class=&quot;highlighter-rouge&quot;&gt;fooSwift&lt;/code&gt; works now.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Taking a step back, to deal with &lt;code class=&quot;highlighter-rouge&quot;&gt;char **&lt;/code&gt; in Swift, we overcame 2 obstacles:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The difference in string representation between C and Swift.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Compared to C pointers, Swift‚Äôs &lt;code class=&quot;highlighter-rouge&quot;&gt;inout&lt;/code&gt; expresses mutability of function
arguments in a more restricted way. We can‚Äôt nest &lt;code class=&quot;highlighter-rouge&quot;&gt;inout&lt;/code&gt;s to represent
the infinite layers of indirections that pointers achieve.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
                <pubDate>Sun, 01 Nov 2015 11:18:40 -0800</pubDate>
                
                <link>https://duan.ca/2015/11/01/char-star-star-in-swift/</link>
                
                <guid isPermaLink="true">https://duan.ca/2015/11/01/char-star-star-in-swift/</guid>
            </item>
            
        
            
        
            
        
            
        
            
        
    </channel>
</rss>
