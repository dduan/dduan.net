<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Daniel Duan's Articles About C</title>
        <link>https://duan.ca/tag/c/</link>
        <atom:link href="https://duan.ca/tag/c/feed.xml" rel="self" type="application/rss+xml" />
            <item>
                <title>Faster C Strings in Swift</title>
                <description>&lt;p&gt;One of the goals in the re-write of my VFS library &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;Pathos&quot;&gt;Pathos&lt;&#x2f;a&gt; is to make it go
fast. What does that mean when most of the time users are hitting the hard
drive when running your code? Well, let&#x27;s not dwell on that for now.&lt;&#x2f;p&gt;
&lt;p&gt;A library like this passes &lt;em&gt;file paths&lt;&#x2f;em&gt; back and forth with C APIs from the OS
a lot. So one way to go fast is to keep the original representation of the paths
as they are provided to us. On macOS and Linux (and other OSes that Swift
doesn&#x27;t officially support yet), paths are bought and sold in the so called
&amp;quot;C strings&amp;quot;: &lt;code&gt;NUL&lt;&#x2f;code&gt;-terminated bytes (8-bit integers) with POSIX APIs and 16-bit
values on Windows with &lt;code&gt;UNICODE&lt;&#x2f;code&gt;.&lt;&#x2f;p&gt;
&lt;p&gt;Let&#x27;s walk over a couple of examples. Here&#x27;s how to get the current working
directory:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source c++&quot;&gt;&lt;span class=&quot;comment line double-slash c&quot;&gt;&lt;span class=&quot;punctuation definition comment c&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; POSIX
char *getcwd(char *buf, size_t size);

&#x2f;&#x2f; Windows
&#x2f;&#x2f; LPTSTR (with right environment) is `wchar_t *`
DWORD GetCurrentDirectory(DWORD nBufferLength, LPTSTR lpBuffer);
&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;The expected steps for using APIs like this are the following:&lt;&#x2f;p&gt;
&lt;ol&gt;
&lt;li&gt;you allocate a buffer large enough to store any result you expect.&lt;&#x2f;li&gt;
&lt;li&gt;you give the buffer to the C function.&lt;&#x2f;li&gt;
&lt;li&gt;the C function fills the buffer with some characters, and a &lt;code&gt;NUL&lt;&#x2f;code&gt; (or &lt;code&gt;0&lt;&#x2f;code&gt;)
right after the last character in the result.&lt;&#x2f;li&gt;
&lt;li&gt;the function use a separate variable to tell you the size of the actual
result, not counting the &lt;code&gt;NUL&lt;&#x2f;code&gt;.&lt;&#x2f;li&gt;
&lt;&#x2f;ol&gt;
&lt;p&gt;It&#x27;s very generous of these functions to give us the size of the result. Because
the point of using &lt;code&gt;NUL&lt;&#x2f;code&gt; to terminate &amp;quot;strings&amp;quot; is to avoid having to use
a separate size. Let&#x27;s use &lt;em&gt;setting the current working directory&lt;&#x2f;em&gt; as the next
example:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source c++&quot;&gt;&lt;span class=&quot;comment line double-slash c&quot;&gt;&lt;span class=&quot;punctuation definition comment c&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; POSIX
int chdir(const char *path);

&#x2f;&#x2f; Windows
BOOL SetCurrentDirectory(LPCTSTR lpPathName);
&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Yup, these APIs don&#x27;t need you to tell them the content size of your buffer. But
if your content doesn&#x27;t end with a &lt;code&gt;NUL&lt;&#x2f;code&gt;, they&#x27;ll happily read beyond your
intended stopping point until it finds a random &lt;code&gt;0&lt;&#x2f;code&gt; in memory.&lt;&#x2f;p&gt;
&lt;p&gt;Anyways, this is pretty classic C stuff. Now let&#x27;s talk about Swift!&lt;&#x2f;p&gt;
&lt;p&gt;The default option to store a file path for most should be a &lt;code&gt;Swift.String&lt;&#x2f;code&gt;,
which is a encoding-agnostic, Unicode glyph based list of characters. But as
I mentioned earlier, I want to avoid the cost of decoding and encoding in the
case where the path is only passing through the Swift code from C to C, without
being analyzed or modified. (If you need a refresher, &lt;a href=&quot;https:&#x2f;&#x2f;youtu.be&#x2f;Vy2r21kli0Q&quot;&gt;I recently made a video
on Unicode and encoding&lt;&#x2f;a&gt;.) So I chose to use an
&lt;a href=&quot;https:&#x2f;&#x2f;developer.apple.com&#x2f;documentation&#x2f;swift&#x2f;contiguousarray&quot;&gt;ContiguousArray&lt;&#x2f;a&gt; to store these C values:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; Simplified for POSIX&lt;&#x2f;span&gt;
&lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;keyword entity&quot;&gt;struct&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;support class&quot;&gt;Path&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; {
    &lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; &lt;span class=&quot;variable parameter&quot;&gt;storage&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;ContiguousArray&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;CChar&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&lt;&#x2f;span&gt;
    &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; ...&lt;&#x2f;span&gt;
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;&lt;code&gt;ContiguousArray&lt;&#x2f;code&gt; (and &lt;code&gt;Array&lt;&#x2f;code&gt;) provides an excellent way to interact with C
APIs we encountered earlier:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;meta function&quot;&gt;&lt;span class=&quot;meta toc-list&quot;&gt;&lt;span class=&quot;storage type function&quot;&gt;init&lt;&#x2f;span&gt;(
    &lt;span class=&quot;variable parameter&quot;&gt;unsafeUninitializedCapacity&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;Int&lt;&#x2f;span&gt;,
    initializingWith &lt;span class=&quot;variable parameter&quot;&gt;initializer&lt;&#x2f;span&gt;: (
        inout &lt;span class=&quot;support class&quot;&gt;UnsafeMutableBufferPointer&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;Element&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&lt;&#x2f;span&gt;, inout &lt;span class=&quot;support class&quot;&gt;Int&lt;&#x2f;span&gt;
    ) &lt;span class=&quot;keyword control&quot;&gt;throws&lt;&#x2f;span&gt; -&amp;gt; &lt;span class=&quot;support class&quot;&gt;Void&lt;&#x2f;span&gt;
)&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; &lt;span class=&quot;keyword control&quot;&gt;rethrows&lt;&#x2f;span&gt;
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Don&#x27;t let the complex-looking signature intimidate you. Essentially, it gives
you write access to the array&#x27;s memory right after its allocation, but before
Swift does standard initialization to it. It works really well with the C APIs
we looked at earlier:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; Store the current directory in a ContiguousArray&lt;&#x2f;span&gt;
&lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; Using the Windows API&lt;&#x2f;span&gt;
&lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; storage = &lt;span class=&quot;support class&quot;&gt;ContiguousArray&lt;&#x2f;span&gt;(
    &lt;span class=&quot;variable parameter&quot;&gt;unsafeUninitializedCapacity&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;Int&lt;&#x2f;span&gt;(&lt;span class=&quot;support class&quot;&gt;MAX_PATH&lt;&#x2f;span&gt;)
) { buffer, count
    &lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; length = &lt;span class=&quot;support class&quot;&gt;GetCurrentWorkingDirectoryW&lt;&#x2f;span&gt;(
        &lt;span class=&quot;support class&quot;&gt;DWORD&lt;&#x2f;span&gt;(&lt;span class=&quot;support class&quot;&gt;MAX_PATH&lt;&#x2f;span&gt;),
        buffer&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;baseAddress &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; C API writes in the allocated memory&lt;&#x2f;span&gt;
    )

    count = length &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; you are responsible for setting size of the array&lt;&#x2f;span&gt;
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Read the steps 1-4 again from earlier, it&#x27;s easy to see how this initializer is
designed to fit that pattern. The resulting array will have all the characters
as its content, and carries the correct size.&lt;&#x2f;p&gt;
&lt;p&gt;When it&#x27;s time to pass the array back to C, we can provide a pointer easily:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;storage&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;withUnsafeBufferPointer {
    &lt;span class=&quot;support class&quot;&gt;SetCurrentDirectory&lt;&#x2f;span&gt;(&lt;span class=&quot;keyword operator&quot;&gt;$&lt;&#x2f;span&gt;&lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;baseAddress&lt;span class=&quot;keyword operator&quot;&gt;!&lt;&#x2f;span&gt;)
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;This is not great, because we don&#x27;t have a &lt;code&gt;NUL&lt;&#x2f;code&gt; at the end of our array.  The
C function that read our array will sometimes read over the contents memory
until it finds a 0! Yikes.&lt;&#x2f;p&gt;
&lt;p&gt;So here&#x27;s an easy fix:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;(storage + [&lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt;])&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;withUnsafeBufferPointer {
    &lt;span class=&quot;support class&quot;&gt;SetCurrentDirectory&lt;&#x2f;span&gt;(&lt;span class=&quot;keyword operator&quot;&gt;$&lt;&#x2f;span&gt;&lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;baseAddress&lt;span class=&quot;keyword operator&quot;&gt;!&lt;&#x2f;span&gt;)
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Instead of using the memory of &lt;code&gt;storage&lt;&#x2f;code&gt;, we construct a new array with an 0 as
its last value. This lets C APIs pick the right place to stop reading.
(Incidentally, Swift includes a built-in version of this &lt;a href=&quot;https:&#x2f;&#x2f;developer.apple.com&#x2f;documentation&#x2f;swift&#x2f;string&#x2f;2430818-utf8cstring&quot;&gt;for converting String
ot UTF-8 (8-bit) C strings&lt;&#x2f;a&gt;,
and it&#x27;s possible to further encode with different encodings.)&lt;&#x2f;p&gt;
&lt;p&gt;Although we&#x27;ve fixed the correctness bug, doing this defeats the purpose of
storing the C string directly somewhat: constructing a new array each time we
want to call a C API is kind of expensive. It involves allocating new memories
and copying over the content, etc.&lt;&#x2f;p&gt;
&lt;p&gt;Alright. How about we carry around the &lt;code&gt;NUL&lt;&#x2f;code&gt; in our array? Let&#x27;s update the
construction code:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; storage = &lt;span class=&quot;support class&quot;&gt;ContiguousArray&lt;&#x2f;span&gt;(
    &lt;span class=&quot;variable parameter&quot;&gt;unsafeUninitializedCapacity&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;Int&lt;&#x2f;span&gt;(&lt;span class=&quot;support class&quot;&gt;MAX_PATH&lt;&#x2f;span&gt;) + &lt;span class=&quot;constant numeric decimal&quot;&gt;1&lt;&#x2f;span&gt;
) { buffer, count
    &lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; length = &lt;span class=&quot;support class&quot;&gt;GetCurrentWorkingDirectoryW&lt;&#x2f;span&gt;(
        &lt;span class=&quot;support class&quot;&gt;DWORD&lt;&#x2f;span&gt;(&lt;span class=&quot;support class&quot;&gt;MAX_PATH&lt;&#x2f;span&gt;),
        buffer&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;baseAddress
    )

    buffer[length] = &lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt;
    count = length + &lt;span class=&quot;constant numeric decimal&quot;&gt;1&lt;&#x2f;span&gt;
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;We add 1 every time we have a say in size. Then we manually set a 0 at the end
of the stuff from C. Having done this, we&#x27;ve solved both the correctness problem
and performance concern from earlier!&lt;&#x2f;p&gt;
&lt;p&gt;The last bit of of this journey is ergonomics. Carrying an extra &lt;code&gt;NUL&lt;&#x2f;code&gt; is fine
if you never look at the array&#x27;s content. But when you do, it&#x27;s important to
remember that the content we care about is &lt;em&gt;almost&lt;&#x2f;em&gt; all of the array, except for
the &lt;code&gt;NUL&lt;&#x2f;code&gt; at the end. In other words, simply don&#x27;t make off-by-1 mistakes and
everything will be fine.&lt;&#x2f;p&gt;
&lt;p&gt;Alright, that&#x27;s easier said than done. To alleviate this off-by-1 painfulness,
I ended up exposing a &amp;quot;view&amp;quot; into the array storage that excludes the last
element. Here&#x27;s the actual definition in &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;Pathos&quot;&gt;Pathos&lt;&#x2f;a&gt;:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;keyword entity&quot;&gt;struct&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;support class&quot;&gt;CString&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;Unit&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;BinaryInteger&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;Equatable&lt;&#x2f;span&gt;, &lt;span class=&quot;support class&quot;&gt;Hashable&lt;&#x2f;span&gt; {
    &lt;span class=&quot;storage modifier&quot;&gt;private&lt;&#x2f;span&gt; &lt;span class=&quot;keyword variable&quot;&gt;var&lt;&#x2f;span&gt; &lt;span class=&quot;variable parameter&quot;&gt;storage&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;ContiguousArray&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;Unit&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&lt;&#x2f;span&gt;
    &lt;span class=&quot;keyword variable&quot;&gt;var&lt;&#x2f;span&gt; &lt;span class=&quot;variable parameter&quot;&gt;content&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;ContiguousArray&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;Unit&lt;&#x2f;span&gt;&amp;gt;.&lt;span class=&quot;constant language enum&quot;&gt;SubSequence&lt;&#x2f;span&gt; {
        storage[&lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt; ..&amp;lt; storage&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;count - &lt;span class=&quot;constant numeric decimal&quot;&gt;1&lt;&#x2f;span&gt;]
    }

    &lt;span class=&quot;storage modifier&quot;&gt;public&lt;&#x2f;span&gt; &lt;span class=&quot;storage type function&quot;&gt;func&lt;&#x2f;span&gt; &lt;span class=&quot;entity name function&quot;&gt;&lt;span class=&quot;variable function&quot;&gt;c&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;T&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&lt;&#x2f;span&gt;(&lt;span class=&quot;variable parameter&quot;&gt;action&lt;&#x2f;span&gt;: (&lt;span class=&quot;support class&quot;&gt;UnsafePointer&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;Unit&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&lt;&#x2f;span&gt;) &lt;span class=&quot;keyword control&quot;&gt;throws&lt;&#x2f;span&gt; -&amp;gt; &lt;span class=&quot;support class&quot;&gt;T&lt;&#x2f;span&gt;) &lt;span class=&quot;keyword control&quot;&gt;throws&lt;&#x2f;span&gt; -&amp;gt; &lt;span class=&quot;support class&quot;&gt;T&lt;&#x2f;span&gt; {
        &lt;span class=&quot;keyword control&quot;&gt;try&lt;&#x2f;span&gt; content&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;withUnsafeBufferPointer {
            &lt;span class=&quot;keyword control&quot;&gt;try&lt;&#x2f;span&gt; action(&lt;span class=&quot;keyword operator&quot;&gt;$&lt;&#x2f;span&gt;&lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;baseAddress&lt;span class=&quot;keyword operator&quot;&gt;!&lt;&#x2f;span&gt;)
        }
    }

    &lt;span class=&quot;meta function&quot;&gt;&lt;span class=&quot;meta toc-list&quot;&gt;&lt;span class=&quot;storage type function&quot;&gt;init&lt;&#x2f;span&gt;(&lt;span class=&quot;variable parameter&quot;&gt;cString&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;UnsafePointer&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;Unit&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&lt;&#x2f;span&gt;)&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; {
       &lt;span class=&quot;keyword variable&quot;&gt;var&lt;&#x2f;span&gt; length = &lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt;
       &lt;span class=&quot;keyword control&quot;&gt;while&lt;&#x2f;span&gt; cString&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;advanced(&lt;span class=&quot;variable parameter&quot;&gt;by&lt;&#x2f;span&gt;: length)&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;pointee != &lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt; {
           length += &lt;span class=&quot;constant numeric decimal&quot;&gt;1&lt;&#x2f;span&gt;
       }

       storage = &lt;span class=&quot;support class&quot;&gt;ContiguousArray&lt;&#x2f;span&gt;(&lt;span class=&quot;variable parameter&quot;&gt;unsafeUninitializedCapacity&lt;&#x2f;span&gt;: length + &lt;span class=&quot;constant numeric decimal&quot;&gt;1&lt;&#x2f;span&gt;) { buffer, count &lt;span class=&quot;keyword control&quot;&gt;in&lt;&#x2f;span&gt;
           &lt;span class=&quot;keyword control&quot;&gt;for&lt;&#x2f;span&gt; offset &lt;span class=&quot;keyword control&quot;&gt;in&lt;&#x2f;span&gt; &lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt; ..&amp;lt; length {
               buffer[offset] = cString&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;advanced(&lt;span class=&quot;variable parameter&quot;&gt;by&lt;&#x2f;span&gt;: offset)&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;pointee
           }

           buffer[length] = &lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt;
           count = length + &lt;span class=&quot;constant numeric decimal&quot;&gt;1&lt;&#x2f;span&gt;
       }
    }   

    &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; ... more stuff&lt;&#x2f;span&gt;
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;&lt;code&gt;storege&lt;&#x2f;code&gt; in this solution is an private implementation detail. &lt;code&gt;content&lt;&#x2f;code&gt; is
the primary access to the content of the string. And finally, this type
interops with C APIs correctly and efficiently because of the extra &lt;code&gt;NUL&lt;&#x2f;code&gt; we put
at the end of &lt;code&gt;storage&lt;&#x2f;code&gt;.&lt;&#x2f;p&gt;
</description>
                <pubDate>Wed, 09 Sep 2020 01:21:26 -0700</pubDate>
                <link>https://duan.ca/2020/09/09/free-c-strings/</link>
                <guid isPermaLink="true">https://duan.ca/2020/09/09/free-c-strings/</guid>
            </item>
            <item>
                <title>Building &#x27;pwd&#x27; Under 1 Minute In Swift</title>
                <description>&lt;p&gt;I guess I&#x27;m starting a series of minute-long videos. In this first video, I built &lt;code&gt;pwd&lt;&#x2f;code&gt; out of &lt;code&gt;getcwd&lt;&#x2f;code&gt;. The
code turned out shorter than I imagined (1 line). Which is a good demonstration of Swift&#x27;s great C-interop
capability.&lt;&#x2f;p&gt;
&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https:&#x2f;&#x2f;www.youtube.com&#x2f;embed&#x2f;YR4MCcMnHrI&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen&gt;&lt;&#x2f;iframe&gt;
&lt;&#x2f;div&gt;
&lt;p&gt;Some details are lost in this video, however. For example, the POSIX standard actually says &lt;code&gt;getcwd&lt;&#x2f;code&gt;&#x27;s 2nd
argument being &lt;code&gt;0&lt;&#x2f;code&gt; is undefined. Luckily, both macOS and Linux define it the way we want (allocate as much
memory as needed). Swift&#x27;s handling of &lt;code&gt;char *&lt;&#x2f;code&gt; aka &lt;code&gt;UnsafeMutablePointer&amp;lt;CChar&amp;gt;&lt;&#x2f;code&gt; in context of a &lt;code&gt;var&lt;&#x2f;code&gt; array
is also very cool.&lt;&#x2f;p&gt;
</description>
                <pubDate>Wed, 27 Dec 2017 01:13:07 -0800</pubDate>
                <link>https://duan.ca/2017/12/27/building-pwd-under-1-minute-in-swift/</link>
                <guid isPermaLink="true">https://duan.ca/2017/12/27/building-pwd-under-1-minute-in-swift/</guid>
            </item>
            <item>
                <title>char ** in Swift</title>
                <description>&lt;p&gt;A &amp;quot;string&amp;quot; in C is just a continuous chunk of &lt;code&gt;char&lt;&#x2f;code&gt; values in memory with
&lt;code&gt;\0&lt;&#x2f;code&gt; at the end. To reference it, a variable of type &lt;code&gt;char *&lt;&#x2f;code&gt; is used to store
the address of the first &lt;code&gt;char&lt;&#x2f;code&gt; (commonly known as a pointer 😉).  It&#x27;s common
to have string manipulating functions take this form:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;void foo(char **errorMessage) {
    &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; ...&lt;&#x2f;span&gt;
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;To mutate the arugment &lt;code&gt;errorMessage&lt;&#x2f;code&gt; of type &lt;code&gt;char *&lt;&#x2f;code&gt;, &lt;code&gt;foo&lt;&#x2f;code&gt; takes a pointer
to it, &lt;code&gt;(char *)*&lt;&#x2f;code&gt;.&lt;&#x2f;p&gt;
&lt;hr &#x2f;&gt;
&lt;p&gt;How do we call &lt;code&gt;foo&lt;&#x2f;code&gt; in Swift?&lt;&#x2f;p&gt;
&lt;p&gt;Here&#x27;s the tl;dr. We can wrap it in a Swift function that have the same
interface:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;meta function&quot;&gt;&lt;span class=&quot;meta toc-list&quot;&gt;&lt;span class=&quot;storage type function&quot;&gt;func&lt;&#x2f;span&gt; &lt;span class=&quot;entity name function&quot;&gt;&lt;span class=&quot;variable function&quot;&gt;fooSwift&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;(inout &lt;span class=&quot;variable parameter&quot;&gt;errorMessage&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;?&lt;&#x2f;span&gt;)&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; {
    &lt;span class=&quot;keyword variable&quot;&gt;var&lt;&#x2f;span&gt; &lt;span class=&quot;variable parameter&quot;&gt;message&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;UnsafeMutablePointer&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;CChar&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&lt;&#x2f;span&gt; = &lt;span class=&quot;constant language nil&quot;&gt;nil&lt;&#x2f;span&gt;

    foo(&lt;span class=&quot;keyword operator&quot;&gt;&amp;amp;&lt;&#x2f;span&gt;message)
    errorMessage = &lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;fromCString(message)
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;&lt;code&gt;errorMessage&lt;&#x2f;code&gt; will contain whatever our C function &lt;code&gt;foo&lt;&#x2f;code&gt; assigns to it.&lt;&#x2f;p&gt;
&lt;hr &#x2f;&gt;
&lt;p&gt;So, what&#x27;s really going on here?&lt;&#x2f;p&gt;
&lt;p&gt;Inspecting &lt;code&gt;foo&lt;&#x2f;code&gt;&#x27;s signature in Swift, we see&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;meta function&quot;&gt;&lt;span class=&quot;meta toc-list&quot;&gt;&lt;span class=&quot;storage type function&quot;&gt;func&lt;&#x2f;span&gt; &lt;span class=&quot;entity name function&quot;&gt;&lt;span class=&quot;variable function&quot;&gt;foo&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;(&lt;span class=&quot;variable parameter&quot;&gt;errorMessage&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;UnsafeMutablePointer&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;UnsafeMutablePointer&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;CChar&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2f;span&gt;)&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;… okey, &lt;code&gt;errorMessage&lt;&#x2f;code&gt;&#x27;s type is little intimidating to someone who doesn&#x27;t
use C functions in Swift everyday (like me)!&lt;&#x2f;p&gt;
&lt;p&gt;Let&#x27;s break it down. Swift does a ton of work for us to interoperate with C:&lt;&#x2f;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;CChar&lt;&#x2f;code&gt; is Swift&#x27;s name for &lt;em&gt;&lt;code&gt;char&lt;&#x2f;code&gt; in C&lt;&#x2f;em&gt; (shocking, amiright?)&lt;&#x2f;p&gt;
&lt;&#x2f;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;UnsafeMutablePointer&amp;lt;Type&amp;gt;&lt;&#x2f;code&gt; roughly translates to &lt;code&gt;Type *&lt;&#x2f;code&gt;, so
syntactically, we can see why
&lt;code&gt;UnsafeMutablePointer&amp;lt;UnsafeMutablePointer&amp;lt;CChar&amp;gt;&amp;gt;&lt;&#x2f;code&gt; is used to bridge the
C type &lt;code&gt;(char *)*&lt;&#x2f;code&gt;.&lt;&#x2f;p&gt;
&lt;&#x2f;li&gt;
&lt;li&gt;
&lt;p&gt;A function that takes &lt;code&gt;UnsafeMutablePointer&amp;lt;Type&amp;gt;&lt;&#x2f;code&gt; argument accepts
&lt;code&gt;inout Type&lt;&#x2f;code&gt; values. Therefore, we can look at &lt;code&gt;foo&lt;&#x2f;code&gt; as&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;code&gt;foo(inout errorMessage: UnsafeMutablePointer&amp;lt;CChar&amp;gt;)
&lt;&#x2f;code&gt;&lt;&#x2f;pre&gt;
&lt;&#x2f;li&gt;
&lt;li&gt;
&lt;p&gt;Swift acknowledge C&#x27;s string representation and provides convenient
methods for converting &lt;code&gt;char *&lt;&#x2f;code&gt; &#x2f; &lt;code&gt;UnsafeMutablePointer&amp;lt;CChar&amp;gt;&lt;&#x2f;code&gt; to its own
&lt;code&gt;String&lt;&#x2f;code&gt; type (&lt;code&gt;String.fromCString()&lt;&#x2f;code&gt;).&lt;&#x2f;p&gt;
&lt;&#x2f;li&gt;
&lt;&#x2f;ol&gt;
&lt;p&gt;Hopefully you can see how &lt;code&gt;fooSwift&lt;&#x2f;code&gt; works now.&lt;&#x2f;p&gt;
&lt;hr &#x2f;&gt;
&lt;p&gt;Taking a step back, to deal with &lt;code&gt;char **&lt;&#x2f;code&gt; in Swift, we overcame 2 obstacles:&lt;&#x2f;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The difference in string representation between C and Swift.&lt;&#x2f;p&gt;
&lt;&#x2f;li&gt;
&lt;li&gt;
&lt;p&gt;Compared to C pointers, Swift&#x27;s &lt;code&gt;inout&lt;&#x2f;code&gt; expresses mutability of function
arguments in a more restricted way. We can&#x27;t nest &lt;code&gt;inout&lt;&#x2f;code&gt;s to represent
the infinite layers of indirections that pointers achieve.&lt;&#x2f;p&gt;
&lt;&#x2f;li&gt;
&lt;&#x2f;ol&gt;
</description>
                <pubDate>Sun, 01 Nov 2015 11:18:40 -0800</pubDate>
                <link>https://duan.ca/2015/11/01/char-star-star-in-swift/</link>
                <guid isPermaLink="true">https://duan.ca/2015/11/01/char-star-star-in-swift/</guid>
            </item>
    </channel>
</rss>