<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Daniel Duan - OOP</title>
        <link>https://duan.ca/tag/OOP/</link>
        <atom:link href="https://duan.ca/tag/OOP/index.xml" rel="self" type="application/rss+xml" />
        
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
            <item>
                <title>A Case For OOP?</title>
                <description>&lt;p&gt;Python’s standard library includes a very handy &lt;code class=&quot;highlighter-rouge&quot;&gt;defaultdict&lt;/code&gt;. It behaves
almost exactly like the standard dictionary except it’ll supply a pre-defined
value for any non-existence keys. It is, unsurpringly, a subclass of &lt;code class=&quot;highlighter-rouge&quot;&gt;dict&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I find my self missing this handy container in Swift. Especially when I use
a normal &lt;code class=&quot;highlighter-rouge&quot;&gt;Dictionary&lt;/code&gt; to accumulate/coalesce values under distinct keys. So I
wrote my own:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/dduan/31ed39c4c98ecb88290f0743cb394c20.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;There are a few noticable things about this implementation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It does not conform to the &lt;code class=&quot;highlighter-rouge&quot;&gt;DictionaryLiteralConvertible&lt;/code&gt; protocol, for no
good reasons, really. The initializer in this protocol takes a varadic
argument. There’s no conevient way to forward this array to a normal
dictionary’s initializer (incidentally, this is a Swift feature I really
want). Plus, I don’t need &lt;code class=&quot;highlighter-rouge&quot;&gt;DefaultDictionary&lt;/code&gt; to be a literal convertible.&lt;/li&gt;
  &lt;li&gt;Most of the code, including the imaginary &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; mentioned in previous
point&lt;a class=&quot;backlink&quot; rel=&quot;canonical&quot; title=&quot;From duan.ca&quot; href=https://duan.ca/2016/05/19/a-case-for-oop/&gt;,&lt;/a&gt; simply reuses stuff from &lt;code class=&quot;highlighter-rouge&quot;&gt;Dictionary&lt;/code&gt;: asscociated type, indexes,
generator, subscript, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In comparison, Python implements &lt;code class=&quot;highlighter-rouge&quot;&gt;defaultdict&lt;/code&gt; in a more intuitive way – via
inheritance.&lt;/p&gt;

&lt;p&gt;But do we want inheritance for &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt;s and &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt;s in Swift? What does that
even mean? Is it simply a case that will go away when protocols become more
powerful?&lt;/p&gt;
</description>
                <pubDate>Thu, 19 May 2016 12:03:02 -0700</pubDate>
                
                <link>https://duan.ca/2016/05/19/a-case-for-oop/</link>
                
                <guid isPermaLink="true">https://duan.ca/2016/05/19/a-case-for-oop/</guid>
            </item>
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
    </channel>
</rss>
