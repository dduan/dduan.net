<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on dduan.net</title>
    <link>http://dduan.net/post/</link>
    <description>Recent content in Posts on dduan.net</description>
    <generator>Hugo -- gohugo.io</generator>
    
    
    
    
    <lastBuildDate>Wed, 22 Apr 2015 11:46:17 PDT</lastBuildDate>
    <atom:link href="http://dduan.net/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>NeoVim, Swift and Make</title>
      <link>http://dduan.net/post/2015/04/neovim-swift-and-make/</link>
      <pubDate>Wed, 22 Apr 2015 11:46:17 PDT</pubDate>
      
      <guid>http://dduan.net/post/2015/04/neovim-swift-and-make/</guid>
      <description>&lt;p&gt;When it comes to Swift source code editing, nothing beats Xcode 6.3! That
includes Xcode 6.2, which drove me to good&amp;rsquo;O Vim for a while.&lt;/p&gt;

&lt;p&gt;Except it&amp;rsquo;s not the old Vim, I&amp;rsquo;m trying out &lt;a href=&#34;http://neovim.org&#34;&gt;NeoVim&lt;/a&gt;. The
most noticable difference in NeoVim compared to Vim is its recent
addition of a built-in terminal.&lt;/p&gt;

&lt;p&gt;With the help of syntax highlighting and a Makefile, working with Swift this
way turns out to be a fine alternative.&lt;/p&gt;

&lt;p&gt;(As a side benefit, I&amp;rsquo;m forced to use only local-context autocompletion. Now
I can actually spell out full UIKit APIs ðŸ˜‰.)&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a gif:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://dduan.net/images/2015/04/demo.gif&#34; alt=&#34;Make Swift NeoVim Demo&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Some details are easy to miss. I pressed &lt;code&gt;,m&lt;/code&gt;, &lt;code&gt;,&lt;/code&gt; being my binding for
&lt;code&gt;&amp;lt;leader&amp;gt;&lt;/code&gt;. A terminal session launched with the &lt;code&gt;make&lt;/code&gt; command running. When
that&amp;rsquo;s done, I could press any key and the terminal pane was dismissed. Since
&lt;code&gt;test&lt;/code&gt; is the default target in my &lt;code&gt;Makefile&lt;/code&gt;, the test suit for my Swift
codes actually ran.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how the shortcut is set in &lt;code&gt;.nvimrc&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if has(&#39;nvim&#39;)
    nnoremap &amp;lt;leader&amp;gt;m :rightbelow vertical split &amp;lt;bar&amp;gt; :term make&amp;lt;cr&amp;gt;
endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The makefile is pretty straightforword if you&amp;rsquo;ve worked with &lt;code&gt;xcodebuild&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;test :
    @xcodebuild test -project ProjectName.xcodeproj -scheme SchemeName -destination &#39;platform=iOS Simulator,name=iPhone 6&#39; | xcpretty

clean :
    @xcodebuild clean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/supermarin/xcpretty&#34;&gt;xcpretty&lt;/a&gt; is a nifty script that
makes &lt;code&gt;xcodebuild&lt;/code&gt;s output much more readable.&lt;/p&gt;

&lt;p&gt;Happy vimming, Swifties :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Swift Function Fun Facts</title>
      <link>http://dduan.net/post/2015/04/swift-function-fun-facts/</link>
      <pubDate>Sat, 18 Apr 2015 16:20:16 PDT</pubDate>
      
      <guid>http://dduan.net/post/2015/04/swift-function-fun-facts/</guid>
      <description>&lt;p&gt;You love Swift. You want to write a class that does HTTP, it might have methods like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func get(URLString:String, params:[String:AnyObject], headers:[String:String])
func post(URLString:String, params:[String:AnyObject], headers:[String:String])
func put(URLString:String, params:[String:AnyObject], headers:[String:String])
// and more for HEAD, OPTIONS â€¦
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But you don&amp;rsquo;t want to force your user to supply all arguments each time. You know that Swift supports default arguments, so you added some. Take GET as an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func get(URLString:String, params:[String:AnyObject]=[:], headers:[String:String]=[:])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now users can do things like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;get(&amp;quot;http://github.com&amp;quot;)
get(&amp;quot;http://httpbin.org/get&amp;quot;, headers:[&amp;quot;Answer&amp;quot;:42])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s flexible! Woohoo!&lt;/p&gt;

&lt;p&gt;After you thought about implementing these, though, you realize that &lt;code&gt;HTTPMethod&lt;/code&gt; is merely a property on &lt;code&gt;NSURLRequest&lt;/code&gt;. In other words, all of the previous methods can share the same implementation. In honor of the DRY principle, you write a function that accepts the method as an arguments and the previous functions each forwards the arguments to this function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func impl(method:String, URLString:String, params:[String:AnyObject], headers:[String:String]) { // â€¦ }

func get(URLString:String, params:[String:AnyObject]=[:], headers:[String:String]=[:])
    impl(&amp;quot;GET&amp;quot;, URLString:URLString, params:params, headers:headers)
}

func post(URLString:String, params:[String:AnyObject]=[:], headers:[String:String]=[:])
    impl(&amp;quot;POST&amp;quot;, URLString:URLString, params:params, headers:headers)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This seems like a sensible solution. Except that later you realize that there needs to be more parameters for each function, so in the end, each function looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func post(
    URLString              : String,
    params                 : [String:AnyObject]       = [:],
    json                   : [String:AnyObject]?      = nil,
    headers                : [String:AnyObject]       = [:],
    auth                   : (String,String)?         = nil,
    allowRedirects         : Bool                     = true,
    requestBody            : NSData?                  = nil,
    URLQuery               : String?                  = nil,
    asyncCompletionHandler : ((HTTPResult!) -&amp;gt; Void)? = nil
    ) -&amp;gt; HTTPResult {
    return impl(
        &amp;quot;POST&amp;quot;,
        URLString              : URLString,
        params                 : params,
        json                   : json,
        headers                : headers,
        auth                   : auth,
        data                   : requestBody,
        URLQuery               : URLQuery,
        redirects              : allowRedirects,
        asyncCompletionHandler : asyncCompletionHandler
    )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remembering that your goal is to respect DRY, and there are now giant blocks of code that all look the same except that first argument to &lt;code&gt;impl()&lt;/code&gt;, you became determined to find a better alternative.&lt;/p&gt;

&lt;p&gt;Well, why not give currying a try? This example of currying with Swift comes to your mind:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func add(a:Int)(b:Int) -&amp;gt; Int { return a + b }
let add3 = add(3)
add3(b:2) // 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we apply this technique and treat &lt;code&gt;method&lt;/code&gt; in &lt;code&gt;impl()&lt;/code&gt; as &lt;code&gt;a&lt;/code&gt; in the example, we would get:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func impl(method:String)(URLString:String, params:[String:AnyObject], headers:[String:String], â€¦) { // â€¦ }
let get = impl(&amp;quot;GET&amp;quot;)
let post = impl(&amp;quot;POST&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;right?  However, you are forcing users to supply each argument again. To make things worse, the number of arguments is a lot larger.&lt;/p&gt;

&lt;p&gt;Hmm, but that&amp;rsquo;s a solved problem, just add default values to &lt;code&gt;impl()&lt;/code&gt;&amp;rsquo;s parameters:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func impl(method:String)(URLString:String, params:[String:AnyObject] = [:], headers:[String:String] = [:], â€¦) { // â€¦ }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ta-da! Wait a minute, Xcode now refuse to compile you code! &lt;code&gt;Default argument is only permitted for a non-curried function parameter&lt;/code&gt;, it saids.&lt;/p&gt;

&lt;p&gt;Stubborn as you are, you decide that perhaps the Swift team hasn&amp;rsquo;t got around to implementing this feature for curry syntax yet. Functions are first-class citizens! Surely if you return a function with default argumentsâ€¦?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func methodFactory(method:String) -&amp;gt; (params:[String:AnyObject] = [:], headers:[String:String] = [:], â€¦) -&amp;gt; Void {
    return {(params, headers, â€¦) in
        impl(method, params:params, headers:headers, â€¦)
    }
}

let get = methodFactory(&amp;quot;GET&amp;quot;)
let post = methodFactory(&amp;quot;POST&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Turns out, this manual form of currying only works when default arguments aren&amp;rsquo;t involved!&lt;/p&gt;

&lt;p&gt;Now, you hate Swift.&lt;/p&gt;

&lt;p&gt;(Hi HN, just to be clear, I don&amp;rsquo;t really hate Swift as in, uh, &lt;em&gt;hate&lt;/em&gt; Swift. Judgning from some comments, I might have failed to convey the lightheartedness that I felt writing this up. It&amp;rsquo;s really like saying to a friend &amp;ldquo;I hate you&amp;rdquo; after he/she pulls a prank on you.)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My Xcode 6.2 And 6.3 Prediction</title>
      <link>http://dduan.net/post/2015/02/my-xcode-62-and-63-prediction/</link>
      <pubDate>Tue, 10 Feb 2015 02:09:50 PST</pubDate>
      
      <guid>http://dduan.net/post/2015/02/my-xcode-62-and-63-prediction/</guid>
      <description>&lt;p&gt;We have a situation here: three versions of Xcode are available to devleopers as of this writing.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Xcode 6.1.1&lt;/li&gt;
&lt;li&gt;Xcode 6.2 beta&lt;/li&gt;
&lt;li&gt;Xcode 6.3 beta&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;6.2 is released with the purpose of making WatchKit availale.&lt;/p&gt;

&lt;p&gt;6.3, so far, has been focused on Swift 1.2 and new Objective-C features, and a
few non-language related features.&lt;/p&gt;

&lt;p&gt;The fact that there are two betas indicates to me each will be followed up by
an official release. So how?&lt;/p&gt;

&lt;p&gt;My guess: there will be an official Xcode 6.2 release after ï£¿Watch release. It doesn&amp;rsquo;t make much sense to skip a minor version.&lt;/p&gt;

&lt;p&gt;Then things get interesting. ï£¿Watch is coming out in April. Shortly after that, we&amp;rsquo;ll have WWDC. Usually, WWDC comes with major Xcode beta release. So &amp;hellip; what happens to version 6.3?&lt;/p&gt;

&lt;p&gt;My guess: either we&amp;rsquo;ll never get Xcode 6.3, or we won&amp;rsquo;t get Xcode 7 this year.&lt;/p&gt;

&lt;p&gt;The former make sense in the context that &lt;a href=&#34;http://9to5mac.com/2015/02/09/apples-ios-9-to-have-huge-stability-and-optimization-focus-after-years-of-feature-additions/&#34;&gt;Apple Is Focused on Stablity&lt;/a&gt;. Xcode needs some love on that front, let&amp;rsquo;s face it!&lt;/p&gt;

&lt;p&gt;On the other hand, no harm would be done if Apple market 6.3 as version 7 come WWDC. Afterall, Swift 1.2 is significant enough to justify a major version.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Build And Run iOS Apps In Commmand Line</title>
      <link>http://dduan.net/post/2015/02/build-and-run-ios-apps-in-commmand-line/</link>
      <pubDate>Sat, 07 Feb 2015 20:35:02 PST</pubDate>
      
      <guid>http://dduan.net/post/2015/02/build-and-run-ios-apps-in-commmand-line/</guid>
      <description>&lt;p&gt;Xcode is slow. Enough said. What&amp;rsquo;s worse, sometimes I find myself
relying too much on auto-completion with Cocoa Touch, a blessing and a curse!&lt;/p&gt;

&lt;p&gt;So I searched for an alternative workflow in command line. The result was
rather confusing: there are posts about using &lt;code&gt;xctool&lt;/code&gt; or &lt;code&gt;xcodebuild&lt;/code&gt; to
build Xcode targets, using &lt;code&gt;ios-sim&lt;/code&gt;, &lt;code&gt;simctl&lt;/code&gt;  or &lt;code&gt;instruments&lt;/code&gt; to manage and
manage or launch simulators. Most of the information is out of date.&lt;/p&gt;

&lt;p&gt;Eventually though, I was able to piece together an answer for my needs.
That is, given an iOS project set up with Xcode 6, I want to&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;build a target.&lt;/li&gt;
&lt;li&gt;launch a iOS simulator.&lt;/li&gt;
&lt;li&gt;install the built .app bundle to the launched simulator.&lt;/li&gt;
&lt;li&gt;run the installed app.&lt;/li&gt;
&lt;li&gt;uninstall the app from the simulator.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All in command line, with Xcode &lt;em&gt;closed&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Before we proceed to the steps, you need to gather a few pieces of information:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;the Xcode build scheme of your choice (e.g. &amp;ldquo;AwesomeApp&amp;rdquo;).&lt;/li&gt;
&lt;li&gt;your app bundle ID (e.g. &amp;ldquo;com.awesome.app&amp;rdquo;).&lt;/li&gt;
&lt;li&gt;name of an existing simulator (e.g. &amp;ldquo;iPhone 6 Plus&amp;rdquo;). If you don&amp;rsquo;t want to
look it up in Xcode GUI, look for it in output of command &lt;code&gt;xcrun simctl
list&lt;/code&gt; .&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ready? Here we go.&lt;/p&gt;

&lt;p&gt;(These commands should be run in the project folder).&lt;/p&gt;

&lt;p&gt;Build the target:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xcodebuild -scheme AwesomeApp -destination &#39;platform=iphonesimulator,name=iPhone 6 Plus&#39; -derivedDataPath build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Launch the simulator:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xcrun instruments -w &#39;iPhone 6 Plus&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install the bundle (after simulator is launched and target is built with
previous commands):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xcrun simctl install booted build/Build/Products/Debug-iphonesimulator/AwesomeApp.app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Launch the app in simulator (after it&amp;rsquo;s installed with the previous command):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xcrun simctl launch booted com.awesome.app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Uninstall the bundle:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xcrun simctl uninstall booted com.awesome.app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quite a few parameters needs to be added for the build step if you have
a comlex project. Please RTFMs. Write some script to automate the steps, if
are a lazy typiest like me.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>tableView:didSelectRowAtIndexPath: In Two Lines</title>
      <link>http://dduan.net/post/2014/05/tableview58didselectrowatindexpath58-in-two-lines/</link>
      <pubDate>Sat, 03 May 2014 13:42:00 -0600</pubDate>
      
      <guid>http://dduan.net/post/2014/05/tableview58didselectrowatindexpath58-in-two-lines/</guid>
      <description>&lt;p&gt;You have a &lt;code&gt;UITableViewController&lt;/code&gt; with a couple of static cells, you want to
invoke some code for each cell in the delegate. Here&amp;rsquo;s a quick way to do it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    - (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
    {

        SEL action = (SEL[]){@selector(method1), @selector(method2)}[indexPath.row];
        ((void (*)(id, SEL))[self methodForSelector: action])(self, action);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s got everything you love about C and Objective-C: array literals, function
pointers, casting, selectors and something called &lt;a href=&#34;http://www.cocoawithlove.com/2008/02/imp-of-current-method.html&#34;&gt;IMPs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This piece of code maps selected cells to methods by putting methods by
indexing selectors in a C array.&lt;/p&gt;

&lt;p&gt;Why all the fuss on the second line? wouldn&amp;rsquo;t a simple &lt;code&gt;performSelector:&lt;/code&gt;
work? The short answer is: to show the compiler that we are responsible
adults. You can read more about it &lt;a href=&#34;SO Answer&#34;&gt;here&lt;/a&gt;;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>One Weird Trick To Make Vim Go Faster On Your Mac</title>
      <link>http://dduan.net/post/2014/05/one-weird-trick-to-make-vim-go-faster-on-your-mac/</link>
      <pubDate>Fri, 02 May 2014 10:25:00 -0600</pubDate>
      
      <guid>http://dduan.net/post/2014/05/one-weird-trick-to-make-vim-go-faster-on-your-mac/</guid>
      <description>&lt;p&gt;I noticed something strange today.&lt;/p&gt;

&lt;p&gt;While playing with Ubuntu on a VirtualBox hosted by OS X Mavericks, Vim
&lt;em&gt;seems&lt;/em&gt; much faster than it being in iTerms2. How could that be? So I took the
following steps to test things out:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Installed exact configurations with Vundle on the VM.&lt;/li&gt;
&lt;li&gt;Vim in Terminal.app&lt;/li&gt;
&lt;li&gt;MacVim with GUI.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nope, Vim is still more responsive on Ubuntu. In fact, text input seem more
responsive on this VM than the host OS in general! I thought I came to the
light switching to OS X after using Linux as desktop for years, and now this?
&lt;em&gt;&lt;a href=&#34;http://developer.android.com/reference/android/util/Log.html#wtf(java.lang.String,%20java.lang.Throwable)&#34;&gt;WTF&lt;/a&gt;?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Defeat and confused, I went to the Internet, and found &lt;a href=&#34;http://stackoverflow.com/questions/4489885/how-can-i-increase-cursor-speed-in-terminal&#34;&gt;something close to an
answer&lt;/a&gt;. Under &lt;em&gt;System Preferences-Keyboard&lt;/em&gt;, drag the two slide
widget (&amp;ldquo;Key Repeat&amp;rdquo; and &amp;ldquo;Deley Until Repeat&amp;rdquo;) to the right most. Suddenly,
Vim become faster!&lt;/p&gt;

&lt;p&gt;Turns out, key repeating is very important for Vim users.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installing PyQt5 with Python 3 On OS X</title>
      <link>http://dduan.net/post/2014/04/installing-pyqt5-with-python-3-on-os-x/</link>
      <pubDate>Wed, 23 Apr 2014 10:36:00 -0600</pubDate>
      
      <guid>http://dduan.net/post/2014/04/installing-pyqt5-with-python-3-on-os-x/</guid>
      <description>&lt;p&gt;Today I installed PyQt5 on OS X 10.9. Turns out, it&amp;rsquo;s not as straight-forward
as one would think.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;homebrew&lt;/code&gt; will &lt;strong&gt;not&lt;/strong&gt; work:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    brew install PyQt5 --with-python3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is because of &lt;a href=&#34;https://github.com/Homebrew/homebrew/issues/25735&#34;&gt;an unfortunate choice&lt;/a&gt; made by the
homebrew maintainer regarding Python 3.&lt;/p&gt;

&lt;p&gt;So installing from &lt;a href=&#34;http://pyqt.sourceforge.net/Docs/PyQt5/installation.html&#34;&gt;source&lt;/a&gt; is the way to go. Following the
installing instruction, you would download and install &lt;a href=&#34;http://pyqt.sourceforge.net/Docs/sip4/installation.html&#34;&gt;sip&lt;/a&gt;
first, the install &lt;a href=&#34;http://pyqt.sourceforge.net/Docs/PyQt5/installation.html&#34;&gt;PyQt5&lt;/a&gt; itself.&lt;/p&gt;

&lt;p&gt;Except that&amp;rsquo;s not enough. When you run &lt;code&gt;python configure.py&lt;/code&gt;, you see this
error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    error: Use the --qmake argument to explicitly specify a working Qt
    qmake.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s pretty self-explanatory. &lt;code&gt;qmake&lt;/code&gt;, the build tool for qt is needed here.
Install qt5 with homebrew and proceed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    brew install qt5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Afterwards, you should be able to import &lt;code&gt;PyQt5&lt;/code&gt; in a Python 3 REPL.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Generating Xcode Build Number From Git</title>
      <link>http://dduan.net/post/2013/09/generating-xcode-build-number-from-git/</link>
      <pubDate>Sun, 29 Sep 2013 15:50:50 -0600</pubDate>
      
      <guid>http://dduan.net/post/2013/09/generating-xcode-build-number-from-git/</guid>
      <description>&lt;p&gt;The build version number in an Xcode project (CFBundleVersion in Info.plist)
must be a monotonically increasing string for each archive submitted to the
App Store. Neglection of this requirement will result in an error during the
binary upload. Some automation will help avoiding this issue.&lt;/p&gt;

&lt;p&gt;First, we want to generate this version number from our version (&lt;em&gt;duh&lt;/em&gt;)
control system (VCS) each time our target gets built. My VCS of choice is Git,
users of other systems just need to get a increasing number from their code
history. On a *nix system, this command will count the number of commits on
&amp;lsquo;develop&amp;rsquo; branch up until HEAD:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    git rev-list develop | wc -l
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a very good candidate for our build number, for longer history
generally correlates to later builds.&lt;/p&gt;

&lt;p&gt;Next, we make Xcode automatically run this command and use its result as the
build number.&lt;/p&gt;

&lt;p&gt;Go to project navigator, select your build target under the project icon,
click &lt;em&gt;Build Phases&lt;/em&gt;, select &lt;em&gt;Editorâ†’Add Build Phaseâ†’Add Run Script Build
Phase&lt;/em&gt; in the menu. Remove the content in editor of the new &lt;em&gt;Run Script&lt;/em&gt;
phase and replace it with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;revnum=`git rev-list develop | wc -l`
echo &amp;quot;#define BUILD_NUMBER $revnum&amp;quot; &amp;gt; InfoPlist.h
touch InfoPlist.h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go to build settings, change value of &lt;em&gt;Preprocess Info.plist File&lt;/em&gt; to &amp;ldquo;YES&amp;rdquo;.
Add &amp;ldquo;InfoPlist.h&amp;rdquo; to &lt;em&gt;Info.plist Preprocessor Prefix Fileâ†’release&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We ask Xcode to run our command and save its result as a &amp;ldquo;#define&amp;rdquo; in a header
file when it builds the project. This is done so that we can replace the
&amp;ldquo;hardcoded&amp;rdquo; build number with the name of the constant:&lt;/p&gt;

&lt;p&gt;Open Info.plist, Double click the value of &lt;em&gt;Bundle Version&lt;/em&gt; and replace it with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BUILD_NUMBER
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s only one issue left: &lt;code&gt;BUILD_NUMBER&lt;/code&gt; is now saved in &lt;em&gt;InfoPlist.h&lt;/em&gt;. Its
value comes from our commit history. So we want to exclude this piece of
information as part of our commit history (I&amp;rsquo;ll leave the reason as an exercise
for the reader). Ignore this file by adding &amp;ldquo;InfoPlist.h&amp;rdquo; to &lt;em&gt;.gitignore&lt;/em&gt; (or
that of your other VCS).&lt;/p&gt;

&lt;p&gt;To recap, when you build the project now, Xcode will find out how many commits
are in the history, define it in a header file as &lt;code&gt;BUILD_NUMBER&lt;/code&gt;, which gets
used as the build number. As long as you keep with with version control, the
build number problem goes away.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sencha Touch 2 and PhoneGap integration</title>
      <link>http://dduan.net/post/2013/05/sencha-touch-2-and-phonegap-integration/</link>
      <pubDate>Tue, 28 May 2013 15:24:30 -0600</pubDate>
      
      <guid>http://dduan.net/post/2013/05/sencha-touch-2-and-phonegap-integration/</guid>
      <description>&lt;p&gt;As one of my pet Sencha Touch project gets close to finish, I started
looking into distribute it as native apps with Phonegap/Cordova.&lt;/p&gt;

&lt;p&gt;One of the concerns in do so is the &amp;lsquo;deviceready&amp;rsquo; event provided by Phonegap,
according to the documentation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is a very important event that every Cordova application should use.&lt;br /&gt;
&amp;hellip;&lt;/p&gt;

&lt;p&gt;The Cordova deviceready event fires once Cordova has fully loaded.
After the device has fired, you can safely make calls to Cordova function.&lt;/p&gt;

&lt;p&gt;Typically, you will want to attach an event listener with
document.addEventListener once the HTML document&amp;rsquo;s DOM has loaded.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In particular, the nice Sencha Touch microloader complicate the matter by
being the sole Javascript file that&amp;rsquo;s supposed to be included in &lt;code&gt;index.html&lt;/code&gt;
and is in charge of starting the actual code of our apps. Yet we need the
starting point of the code be a response to the &lt;code&gt;deviceready&lt;/code&gt; event.&lt;/p&gt;

&lt;p&gt;After some googling, I found that most information on this matter is either
inaccurate, incomplete or outdated, that is until I found &lt;a href=&#34;http://stackoverflow.com/a/10457158/243798&#34;&gt;this answer&lt;/a&gt; by
&lt;a href=&#34;http://dougan.me&#34;&gt;Robert Dougan&lt;/a&gt; on StackOverflow:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Sencha Touch 2 will listen to that event and call your onReady/launch methods
- therefore if you try listening to them in the launch method,
it has already been fired.&lt;/p&gt;

&lt;p&gt;Just put your logic inside the launch method in your application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To verify this claim, I dug into &lt;code&gt;sencha-touch-debug.js&lt;/code&gt; distributed with
Sencha Touch 2.2 and found the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (Ext.browser.is.PhoneGap &amp;amp;&amp;amp; !Ext.os.is.Desktop) {
    if (!Ext.readyListenerAttached) {
        Ext.readyListenerAttached = true;
        document.addEventListener(&#39;deviceready&#39;, triggerFn, false);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It appears that the &lt;code&gt;deviceready&lt;/code&gt; event is taken into account here as long as
&lt;code&gt;Ext.browser.is.PhoneGap&lt;/code&gt; is true in a mobile browser envronment, which, in the
same source code, means:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (typeof window.PhoneGap != &#39;undefined&#39; ||
    typeof window.Cordova != &#39;undefined&#39;  ||
    typeof window.cordova != &#39;undefined&#39;) {
    isWebView = true;
    this.setFlag(&#39;PhoneGap&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, the global variable PhoneGap, cordova or Cordova needs to be defined to
satisfy Sencha Touch 2&amp;rsquo;s expectation of PhoneGap environment. Those globals
are defined in the &lt;code&gt;cordova-x.y.x.js&lt;/code&gt; file included in the PhoneGap/Cordova
project files.&lt;/p&gt;

&lt;p&gt;So what needs to be done for the integration is simple (if not clear):&lt;/p&gt;

&lt;p&gt;include &lt;code&gt;cordova-x.y.x.js&lt;/code&gt; in the js section of &lt;code&gt;app.json&lt;/code&gt; project file so that
the microloader knows to load it up early:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;js&amp;quot;: [
    {
        &amp;quot;path&amp;quot;: &amp;quot;path/to/cordova-x.y.z.js&amp;quot;,
    },
    {
        &amp;quot;path&amp;quot;: &amp;quot;touch/sencha-touch.js&amp;quot;,
        &amp;quot;x-bootstrap&amp;quot;: true
    },
    {
        &amp;quot;path&amp;quot;: &amp;quot;app.js&amp;quot;,
        &amp;quot;bundle&amp;quot;: true, 
        &amp;quot;update&amp;quot;: &amp;quot;delta&amp;quot;
    }
],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run &lt;code&gt;sencha app build package&lt;/code&gt; and drop the files it produces to the &lt;code&gt;www&lt;/code&gt;
folder in the PhoneGap project.&lt;/p&gt;

&lt;p&gt;Compile, ship.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sencha Touch Workflow with GNU Make and Tmux</title>
      <link>http://dduan.net/post/2013/05/sencha-touch-workflow-with-gnu-make-and-tmux/</link>
      <pubDate>Mon, 27 May 2013 15:00:00 -0600</pubDate>
      
      <guid>http://dduan.net/post/2013/05/sencha-touch-workflow-with-gnu-make-and-tmux/</guid>
      <description>&lt;p&gt;I throw this Makefile to the root directory of my Sencha Touch 2 projects for
workflow automation.&lt;/p&gt;

&lt;p&gt;Assuming you write in CoffeeScript and run Tmux in a terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;make develop&lt;/code&gt; will put &lt;code&gt;compass&lt;/code&gt; and &lt;code&gt;coffee&lt;/code&gt; to watch mode, in addition to
spawning a local web server with Python 3. The three commands will run in three
separate Tmux panes.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;make watch&lt;/code&gt; does the same thing sans the server spawning.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;make&lt;/code&gt; simply compile coffee script files and sass files.&lt;/p&gt;

&lt;p&gt;You can figure out the granular commands with some minimal knowledge of GNU
Make.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/DaNmarner/5659003.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Dynamic Height for List Item in Sencha Touch 2</title>
      <link>http://dduan.net/post/2013/05/dynamic-height-for-list-item-in-sencha-touch-2/</link>
      <pubDate>Sun, 19 May 2013 16:03:30 -0600</pubDate>
      
      <guid>http://dduan.net/post/2013/05/dynamic-height-for-list-item-in-sencha-touch-2/</guid>
      <description>&lt;p&gt;tl;dr: Set the &lt;code&gt;itemHeight&lt;/code&gt; value to &lt;code&gt;auto&lt;/code&gt; and you&amp;rsquo;ll get list items
with dynamic height in Sencha Touch 2.&lt;/p&gt;

&lt;p&gt;In the Ext.List component provided by Sencha Touch 2, all SimpleListItem
(or ListItem) has the same height. This means if your items each has content
of different height, the list would look awkward.&lt;/p&gt;

&lt;p&gt;Fear not! Here&amp;rsquo;s a solution (and its discovery).&lt;/p&gt;

&lt;p&gt;Load up a Ext.List and inspect one of the item element with Chrome/Safari
developer tool, you&amp;rsquo;ll find its &lt;code&gt;element.style&lt;/code&gt; has &lt;code&gt;height: 47px !important;&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://dduan.net/images/2013/05/height.png&#34; alt=&#34;Default Height on List Item in Sencha Touch 2&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the key: CSS properties under &lt;code&gt;element.style&lt;/code&gt; are set by Javascript.
In other words, any attempt to override this property in stylesheet will fail.
(Try it by specifying a height value on &lt;code&gt;div.x-list-item&lt;/code&gt;, or any other class
you suspect, if you need some convincing).&lt;/p&gt;

&lt;p&gt;So, how do we fix this with Javascript? If you examine the documentaion,
Ext.List has a config option &lt;code&gt;itemHeight&lt;/code&gt; with a default value. You can set it
to a value that works best with all potential heights of your item content,
resulting in items with identical heights. Setting &lt;code&gt;itemHeight&lt;/code&gt; to &lt;code&gt;auto&lt;/code&gt;,
however, will make each item container flow with its inner element, thus
achive dynamic height.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sencha Touch 2.2 Alpha Sass Bug Workaround</title>
      <link>http://dduan.net/post/2013/01/sencha-touch-22-alpha-sass-bug-workaround/</link>
      <pubDate>Mon, 14 Jan 2013 13:47:00 -0600</pubDate>
      
      <guid>http://dduan.net/post/2013/01/sencha-touch-22-alpha-sass-bug-workaround/</guid>
      <description>&lt;p&gt;Sencha &lt;a href=&#34;http://cdn.sencha.com/touch/alpha/touch-2.2.0-alpha.zip&#34;&gt;released&lt;/a&gt; a new version Sencha Touch with Windows Phone 8 support.
But since it&amp;rsquo;s an alpha, there are a few more things to do than what the
&lt;a href=&#34;http://cdn.sencha.com/touch/alpha/2.2.0.52/release-notes.html&#34;&gt;release note&lt;/a&gt; says to get it working.&lt;/p&gt;

&lt;p&gt;One thing I&amp;rsquo;ve noticed is that when you generate a new app with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sencha generate app Foo path/to/foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and make the changes to &lt;code&gt;resources/sass/app.scss&lt;/code&gt; according to the release
note, &lt;code&gt;compass compile path/to/foo/resources/sass&lt;/code&gt; fails complaining a font
file is missing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;File not found or cannot be read: path/to/foo/resources/sass/stylesheets/fonts/pictos/pictos-web.woff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To fix this, copy the needed fonts to where it supposed to be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd path/to/foo
mkdir -p resources/sass/stylesheets/fonts/pictos
cp touch/resources/themes/fonts/pictos/pictos-web.* resources/sass/stylesheets/fonts/pictos/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next error you&amp;rsquo;ll see from &lt;code&gt;compass compile&lt;/code&gt; is caused by the name changes
to a few sass files in the framework. Long-story short, you need to change
&lt;code&gt;resources/sass/app.scss&lt;/code&gt; to the following:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/4533833.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;and &lt;code&gt;compass&lt;/code&gt; should be happy from there.&lt;/p&gt;

&lt;p&gt;While you are at it, why not checkout the magical Windows Phone 8 theme
included in Sencha Touch 2.2 alpha.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Windows Phone 8 Theme in Sencha Touch 2.2</title>
      <link>http://dduan.net/post/2013/01/windows-phone-8-theme-in-sencha-touch-22/</link>
      <pubDate>Mon, 14 Jan 2013 13:45:00 -0600</pubDate>
      
      <guid>http://dduan.net/post/2013/01/windows-phone-8-theme-in-sencha-touch-22/</guid>
      <description>&lt;p&gt;Sencha Touch 2.2 Alpha shipped with Windows Phone 8/IE 10 support.
And it&amp;rsquo;s pretty impressive! Just take a look at the starter app under the
original theme and the Windows Phone 8 theme:&lt;/p&gt;

&lt;p&gt;The Default Theme:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://dduan.net/images/2013/01/original-theme.png&#34; alt=&#34;Sencha Touch 2.2 default theme&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;WP8 Theme:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://dduan.net/images/2013/01/wp8-theme.png&#34; alt=&#34;Sencha Touch 2.2 windows phone 8 theme&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;And it only takes a minute or two to get to the second screen.
(if you have Sencha Cmd and Sencha Touch SDK 2.2 alpha ready). Here&amp;rsquo;s how.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In SDK folder, generate the app with &lt;code&gt;sencha generate app Foo path/to/foo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dduan.net/2013/01/14/Sencha-Touch-22-Alpha-Sass-Bug-Workaround.html&#34;&gt;Workaround&lt;/a&gt; the bug shipped in this alpha version. This won&amp;rsquo;t be
necessary once the bug has been fixed in the next release&lt;/li&gt;
&lt;li&gt;Open &lt;code&gt;resources/sass/app.scss&lt;/code&gt; in the generated project folder )it should
look like &lt;a href=&#34;https://gist.github.com/4533833&#34;&gt;this&lt;/a&gt; after step 2).
Replace every appearance of the word &lt;em&gt;default&lt;/em&gt; to &amp;ldquo;windows&amp;rdquo;. Then run
&lt;code&gt;compass compile resources/sass&lt;/code&gt; in the project root.&lt;/li&gt;
&lt;li&gt;Serve the project in a web server (I usually do
&lt;code&gt;python -m SimpleHTTPServer&lt;/code&gt;), fire up its url (localhost:800) and&amp;hellip;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Boom!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>&#34;Hello, World!&#34; The Hard Way with Sencha Touch</title>
      <link>http://dduan.net/post/2013/01/hello-world-the-hard-way-with-sencha-touch/</link>
      <pubDate>Fri, 11 Jan 2013 21:28:59 -0600</pubDate>
      
      <guid>http://dduan.net/post/2013/01/hello-world-the-hard-way-with-sencha-touch/</guid>
      <description>&lt;p&gt;When I first got into the amazing Sencha Touch HTML5 framwork, it came across
as a compilation of visual components that looks mobile, &lt;a href=&#34;http://compass-style.org&#34;&gt;easily themable&lt;/a&gt;,
leverage the latest HTML5 technology to be efficient and, best
of all, are created within the Javascript code as oppose to being shoved
in to an HTML file and demand DOM tinkering later.&lt;/p&gt;

&lt;p&gt;But a closer look would reveal a lot more goodies beyond those handy
components in Sencha Touch. It offers &lt;a href=&#34;http://docs.sencha.com/touch/2-1/#!/guide/class_system&#34;&gt;a class system&lt;/a&gt;, a &lt;a href=&#34;http://www.sencha.com/learn/architecting-your-app-in-ext-js-4-part-1&#34;&gt;M&lt;/a&gt;&lt;a href=&#34;http://www.sencha.com/learn/architecting-your-app-in-ext-js-4-part-2&#34;&gt;V&lt;/a&gt;&lt;a href=&#34;http://www.sencha.com/learn/architecting-your-app-in-ext-js-4-part-3&#34;&gt;C&lt;/a&gt;
&lt;a href=&#34;http://www.sencha.com/blog/architecting-your-app-with-sencha-touch-2-mvc&#34;&gt;pattern&lt;/a&gt;, tools that handles code dependency, compression and native
packaging, etc. Albeit daunting, learning and embracing all of those offerings
makes a quite enjoyable coding experience and rewards me with development
effieciency overall.&lt;/p&gt;

&lt;p&gt;Sometimes though, I need complete control of a visual component that doesn&amp;rsquo;t
exist in the framework. How to make this work with everything mentioned above
is implied in various tutorials posted by the Sencha team, but I couldn&amp;rsquo;t find
a clear illustration of that, which is why I decided to write one here.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s our goal: make a component that displays data from a model with our own
custom HTML; manage it along with some provided components from the framework
and follow the MVC pattern.&lt;/p&gt;

&lt;p&gt;I assume you have the basics set up. I&amp;rsquo;m using Sencha Cmd 3.0.0.250, Sencha
Touch SDK 2.1.0 and OS X Mountain Lion as of this writing.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start by generating a MVC-ready skeleton project called HelloWorld. Go to
the SDK&amp;rsquo;s folder and type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sencha generate app HelloWorld ~/helloworld
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;replace the last parameter with the path you would like for the project files
to stay. We&amp;rsquo;ll be working in this folder from now on.&lt;/p&gt;

&lt;p&gt;In the skeleton project, a main view was created under &lt;code&gt;app/view/Main.js&lt;/code&gt; and
declared as dependency for &lt;code&gt;app.js&lt;/code&gt;. An instance of it is created when the app
finished loading. We&amp;rsquo;ll keep this setup as our main view. Let&amp;rsquo;s reduce
&lt;code&gt;app/view/Main.js&lt;/code&gt; to a simplest possble form for our purposes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Ext.define(&#39;HelloWorld.view.Main&#39;, {
      extend: &#39;Ext.Container&#39;,
      config: {
        items: [ { xtype: &#39;helloview&#39; } ]
      }
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Following the convention, we name the class in corrispondance with its
filepath within the &lt;code&gt;app&lt;/code&gt; folder (&amp;lsquo;view/Main.js&amp;rsquo; =&amp;gt; &amp;lsquo;view.Main&amp;rsquo;). All
classes created with &lt;code&gt;Ext.define&lt;/code&gt; should follow this convention so that Sencha
tools can relate code dependencies to file structure and do its magic for us.
We&amp;rsquo;ll circle back to this.&lt;/p&gt;

&lt;p&gt;Our main view will be a plain container and has a &lt;code&gt;helloview&lt;/code&gt; in it. An
&lt;code&gt;Ext.Container&lt;/code&gt; has the ability to &amp;hellip; contain stuff. Specifically, it can
organize &lt;code&gt;Ext.Component&lt;/code&gt;s visually. &lt;code&gt;helloview&lt;/code&gt; will be that component. Let&amp;rsquo;s
define it next.&lt;/p&gt;

&lt;p&gt;Create the file &lt;code&gt;app/view/HelloView.js&lt;/code&gt; as the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Ext.define(&#39;HelloWorld.view.HelloView&#39;, {
      extend: &#39;Ext.Component&#39;,
      xtype: &#39;helloview&#39;,
      config: {
        tpl: &#39;&amp;lt;div class=&amp;quot;greeting&amp;quot;&amp;gt;Hello, {name}!&amp;lt;/div&amp;gt;&#39;
      }
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As promised, &lt;code&gt;HelloWorld.view.HelloView&lt;/code&gt; is a &lt;code&gt;Ext.Component&lt;/code&gt;. We declare its
&lt;code&gt;xtype&lt;/code&gt; to be the one we used in the main view. The really interesting part is
its &lt;code&gt;tpl&lt;/code&gt; configuration. This is where our customization integrates with the
rest of the Sencha Touch framework, so it&amp;rsquo;s worth dive into a bit deeper.&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;Caution&lt;/em&gt;: &lt;code&gt;tpl&lt;/code&gt; can not be mixed with &lt;code&gt;items&lt;/code&gt;, if you want standard components
mixed in with yours, make them share a container and arrange a proper layout
there.)&lt;/p&gt;

&lt;p&gt;Take a look at the official &lt;a href=&#34;http://docs.sencha.com/touch/2-1/#!/api/Ext.Component-cfg-tpl&#34;&gt;documentation for &lt;code&gt;tpl&lt;/code&gt;&lt;/a&gt;. It accepts an
&lt;a href=&#34;http://docs.sencha.com/touch/2-1/#!/api/Ext.XTemplate&#34;&gt;&lt;code&gt;Ext.XTemplate&lt;/code&gt;&lt;/a&gt;, which is basically free-range HTML plus some syntax to
insert data provided to the component. Apply all your HTML skills here! For
illustration purposes, we only throw in a basic &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;{name}&lt;/code&gt; part will be replaced by the actual data, which every
&lt;code&gt;Ext.Component&lt;/code&gt; has as a configuration option by default. Being such option
means two things:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. You can specify its value in the class definition, as we did for `tpl`.
2. It gets a &amp;quot;getter/setter&amp;quot; that let you query/change its value at anytime
    through the instance&#39;s existence.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;ll use the setter for &lt;code&gt;data&lt;/code&gt; &amp;ndash; &lt;code&gt;setData()&lt;/code&gt; to populate this field in the
template later. &lt;code&gt;setData()&lt;/code&gt; accept one raw Javascript object and make its
properties accessible to the template.&lt;/p&gt;

&lt;p&gt;Next, let&amp;rsquo;s make a simplistic model in &lt;code&gt;app/model/Greetee.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Ext.define(&#39;HelloWorld.model.Greetee&#39;, {
      extend: &#39;Ext.data.Model&#39;,
      config: {
        fields: [&#39;name&#39;]
      }
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A model, with a field &amp;lsquo;name&amp;rsquo;. Hey, that&amp;rsquo;s &lt;code&gt;as simple as possible, but no
simpler&lt;/code&gt;, Einstein would endorse it!&lt;/p&gt;

&lt;p&gt;We won&amp;rsquo;t use any proxy or store in conjunction with the model because we
only need to show how a customized view works within the Sencha Touch MVC
pattern. Speaking of which, a controller does just that. So to tie everything
togeter, here&amp;rsquo;s &lt;code&gt;app/controller/Main.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Ext.define(&#39;HelloWorld.controller.Main&#39;, {
      extend: &#39;Ext.app.Controller&#39;,
      config: {
        models: [&#39;Greetee&#39;],
        views: [&#39;HelloView&#39;],
        refs: {
          helloView: &#39;.helloview&#39;
        }
      },
      launch: function() {
        var m = Ext.create(&#39;HelloWorld.model.Greetee&#39;, { name: &#39;World&#39; });
        return this.getHelloView().setData(m.getData());
      }
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To get reference to the view components, Sencha Touch provide &lt;code&gt;refs&lt;/code&gt; in
controllers, through which we map &lt;code&gt;hello&lt;/code&gt; to our customized component&amp;rsquo;s xtype.
There are more details about this in the &lt;a href=&#34;http://docs.sencha.com/touch/2-1/#!/guide/controllers&#34;&gt;offical documentation&lt;/a&gt;. We now
can use &lt;code&gt;getHelloView()&lt;/code&gt; in other methods. &lt;code&gt;launch()&lt;/code&gt; gets invoked after
everything gets loaded, and we tie the model and the view together here.&lt;/p&gt;

&lt;p&gt;Again, a little imagination might help. By that I mean the data source of the
model could be from a RESTful network API, a picture from a phone camera via
Phonegap, a record from browser&amp;rsquo;s localstorage, etc. We simply created one in
memory for illustration.&lt;/p&gt;

&lt;p&gt;We use &lt;code&gt;getHelloView()&lt;/code&gt; to get reference to our &lt;code&gt;helloview&lt;/code&gt; instance, then use
its &lt;code&gt;setData()&lt;/code&gt; to populate its template field. But we can&amp;rsquo;t pass in the model
object directly (as mentioned above, a raw Javascript object is needed), so
we convert it with its &lt;code&gt;getData()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Finally, we specify the &lt;code&gt;models&lt;/code&gt; and &lt;code&gt;views&lt;/code&gt; involved with this controller in
&lt;code&gt;config&lt;/code&gt; so that the files of these classes gets loaded properly. For the same
purpose, we need to open &lt;code&gt;app.js&lt;/code&gt; and add the following line into the object
passed to &lt;code&gt;Ext.application()&lt;/code&gt; (which is a controller too):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    controllers: [&#39;Main&#39;],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This makes the framework aware of our &lt;code&gt;HelloWorld.controller.Main&lt;/code&gt;. It&amp;rsquo;s
unnecessary to use the full class name becaue we followed the naming
convention.&lt;/p&gt;

&lt;p&gt;At this point, our code is complete. Go to the project folder in terminal
and fire up a web server:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    python -m SimpleHTTPServer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open &lt;a href=&#34;http://localhost:8000&#34;&gt;http://localhost:8000&lt;/a&gt; in your browser and take a gander!&lt;/p&gt;

&lt;p&gt;A screenshot of this app would be an overkill, if you follow along correctly,
the phrase &amp;ldquo;Hello, World!&amp;rdquo; will show, and that&amp;rsquo;s all.&lt;/p&gt;

&lt;p&gt;So this long-winded excercise results in not much. But I hope you won&amp;rsquo;t find
it pointless. When I try to construct my app UI with Sencha Touch, I first try
my best to make the Senche component work with the design. When breaking out
and customize is inevitable, I try to stay within the framwork as much as
possible to make the most out of it. What&amp;rsquo;s described in this article is a
common way to do that.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MongoDB, PHP And Mountain Lion</title>
      <link>http://dduan.net/post/2012/11/mongodb-php-and-mountain-lion/</link>
      <pubDate>Thu, 29 Nov 2012 09:37:30 -0600</pubDate>
      
      <guid>http://dduan.net/post/2012/11/mongodb-php-and-mountain-lion/</guid>
      <description>&lt;p&gt;Here are the necessary steps to make PHP work with MongoDB on vanilla
Mac OS X 10.8 (Mountain Lion):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install &lt;a href=&#34;https://developer.apple.com/downloads/index.action&#34;&gt;Command Lion Tools for Xcode&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install Homebrew:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ruby -e &amp;quot;$(curl -fsSkL raw.github.com/mxcl/homebrew/go)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Prioritize Homebrew&amp;rsquo;s binaries in $PATH:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;quot;export /usr/local/bin:$PATH&amp;quot; &amp;gt;&amp;gt; ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install PHP 5.4 with Homebrew:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Setup the tap for dependencies
brew tap homebrew/dupes
# This is the best 
brew tap josegonzalez/homebrew-php
# And install
brew install php54
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install MongoDB with Homebrew&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install mongodb
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install &amp;ldquo;PHP Driver&amp;rdquo; for MongoDB:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo pecl install mongo
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Done.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now go run some PHP-MongoDB scripts with the build-in web server from
PHP 5.4 like you normally would (don&amp;rsquo;t forget to start &lt;code&gt;mongod&lt;/code&gt;) and everything
should work.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>