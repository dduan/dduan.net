<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xcode on dduan.net</title>
    <link>http://dduan.net/tags/xcode/</link>
    <description>Recent content in Xcode on dduan.net</description>
    <generator>Hugo -- gohugo.io</generator>
    
    
    
    
    <lastBuildDate>Sun, 05 Jul 2015 22:36:09 PDT</lastBuildDate>
    <atom:link href="http://dduan.net/tags/xcode/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Dynamic Swift Framework Without Xcode</title>
      <link>http://dduan.net/post/2015/07/dynamic-swift-framework-without-xcode/</link>
      <pubDate>Sun, 05 Jul 2015 22:36:09 PDT</pubDate>
      
      <guid>http://dduan.net/post/2015/07/dynamic-swift-framework-without-xcode/</guid>
      <description>&lt;p&gt;I came up with this question recently:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Can we even use Frameworks with &lt;a href=&#34;https://twitter.com/hashtag/Swiftlang?src=hash&#34;&gt;#Swiftlang&lt;/a&gt; on Linux?&lt;/p&gt;&amp;mdash; Daniel Duan (@daniel_duan) &lt;a href=&#34;https://twitter.com/daniel_duan/status/617470929241706496&#34;&gt;July 4, 2015&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;And I&amp;rsquo;m going to give the answer in this post (spoiler alert: yes, sort of).&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the content of a framework created by Xcode:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/2015/07/just-framework-structure.png&#34; alt=&#34;Just Framework Structure&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Some of the files, such as &lt;code&gt;Info.plist&lt;/code&gt;, are obviously construct of Xcode.
Play with &lt;code&gt;swiftc&lt;/code&gt; long enough, one would find that the &lt;code&gt;.swiftdoc&lt;/code&gt;s, the
&lt;code&gt;.swiftmodule&lt;/code&gt;s and the one binary file came from the Swift compiler.&lt;/p&gt;

&lt;p&gt;Instead of listing the relevant &lt;code&gt;swiftc&lt;/code&gt; command options, I&amp;rsquo;ve created a &lt;a href=&#34;https://github.com/dduan/Swift-Framework-Without-Xcode&#34;&gt;sample project&lt;/a&gt; to demonstrate how one can complie and link to frameworks so that they can be &lt;code&gt;import&lt;/code&gt;ed in the application code. The key ingredient for achieving it lies in &lt;em&gt;Makefile&lt;/em&gt;. In summary, &lt;code&gt;swiftc&lt;/code&gt; can do these for us:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;generate a binary as a library/framework&lt;/li&gt;
&lt;li&gt;emit a &lt;code&gt;.swiftmodule&lt;/code&gt; file, which Swift needs to understand that binary.&lt;/li&gt;
&lt;li&gt;assign a path the Swift runtime needs to locate this framework.&lt;/li&gt;
&lt;li&gt;compile source code that imports the framework, given that they exist in the paths relative to the app binary in step 3.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Based on these observations, it&amp;rsquo;s not hard to imagine more sophisticated build systems, such as IDEs and package/dependency management systems.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My Xcode 6.2 And 6.3 Prediction</title>
      <link>http://dduan.net/post/2015/02/my-xcode-62-and-63-prediction/</link>
      <pubDate>Tue, 10 Feb 2015 02:09:50 PST</pubDate>
      
      <guid>http://dduan.net/post/2015/02/my-xcode-62-and-63-prediction/</guid>
      <description>&lt;p&gt;We have a situation here: three versions of Xcode are available to devleopers as of this writing.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Xcode 6.1.1&lt;/li&gt;
&lt;li&gt;Xcode 6.2 beta&lt;/li&gt;
&lt;li&gt;Xcode 6.3 beta&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;6.2 is released with the purpose of making WatchKit availale.&lt;/p&gt;

&lt;p&gt;6.3, so far, has been focused on Swift 1.2 and new Objective-C features, and a
few non-language related features.&lt;/p&gt;

&lt;p&gt;The fact that there are two betas indicates to me each will be followed up by
an official release. So how?&lt;/p&gt;

&lt;p&gt;My guess: there will be an official Xcode 6.2 release after Watch release. It doesn&amp;rsquo;t make much sense to skip a minor version.&lt;/p&gt;

&lt;p&gt;Then things get interesting. Watch is coming out in April. Shortly after that, we&amp;rsquo;ll have WWDC. Usually, WWDC comes with major Xcode beta release. So &amp;hellip; what happens to version 6.3?&lt;/p&gt;

&lt;p&gt;My guess: either we&amp;rsquo;ll never get Xcode 6.3, or we won&amp;rsquo;t get Xcode 7 this year.&lt;/p&gt;

&lt;p&gt;The former make sense in the context that &lt;a href=&#34;http://9to5mac.com/2015/02/09/apples-ios-9-to-have-huge-stability-and-optimization-focus-after-years-of-feature-additions/&#34;&gt;Apple Is Focused on Stablity&lt;/a&gt;. Xcode needs some love on that front, let&amp;rsquo;s face it!&lt;/p&gt;

&lt;p&gt;On the other hand, no harm would be done if Apple market 6.3 as version 7 come WWDC. Afterall, Swift 1.2 is significant enough to justify a major version.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Generating Xcode Build Number From Git</title>
      <link>http://dduan.net/post/2013/09/generating-xcode-build-number-from-git/</link>
      <pubDate>Sun, 29 Sep 2013 15:50:50 -0600</pubDate>
      
      <guid>http://dduan.net/post/2013/09/generating-xcode-build-number-from-git/</guid>
      <description>&lt;p&gt;The build version number in an Xcode project (CFBundleVersion in Info.plist)
must be a monotonically increasing string for each archive submitted to the
App Store. Neglection of this requirement will result in an error during the
binary upload. Some automation will help avoiding this issue.&lt;/p&gt;

&lt;p&gt;First, we want to generate this version number from our version (&lt;em&gt;duh&lt;/em&gt;)
control system (VCS) each time our target gets built. My VCS of choice is Git,
users of other systems just need to get a increasing number from their code
history. On a *nix system, this command will count the number of commits on
&amp;lsquo;develop&amp;rsquo; branch up until HEAD:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    git rev-list develop | wc -l
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a very good candidate for our build number, for longer history
generally correlates to later builds.&lt;/p&gt;

&lt;p&gt;Next, we make Xcode automatically run this command and use its result as the
build number.&lt;/p&gt;

&lt;p&gt;Go to project navigator, select your build target under the project icon,
click &lt;em&gt;Build Phases&lt;/em&gt;, select &lt;em&gt;Editor→Add Build Phase→Add Run Script Build
Phase&lt;/em&gt; in the menu. Remove the content in editor of the new &lt;em&gt;Run Script&lt;/em&gt;
phase and replace it with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;revnum=`git rev-list develop | wc -l`
echo &amp;quot;#define BUILD_NUMBER $revnum&amp;quot; &amp;gt; InfoPlist.h
touch InfoPlist.h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go to build settings, change value of &lt;em&gt;Preprocess Info.plist File&lt;/em&gt; to &amp;ldquo;YES&amp;rdquo;.
Add &amp;ldquo;InfoPlist.h&amp;rdquo; to &lt;em&gt;Info.plist Preprocessor Prefix File→release&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We ask Xcode to run our command and save its result as a &amp;ldquo;#define&amp;rdquo; in a header
file when it builds the project. This is done so that we can replace the
&amp;ldquo;hardcoded&amp;rdquo; build number with the name of the constant:&lt;/p&gt;

&lt;p&gt;Open Info.plist, Double click the value of &lt;em&gt;Bundle Version&lt;/em&gt; and replace it with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BUILD_NUMBER
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s only one issue left: &lt;code&gt;BUILD_NUMBER&lt;/code&gt; is now saved in &lt;em&gt;InfoPlist.h&lt;/em&gt;. Its
value comes from our commit history. So we want to exclude this piece of
information as part of our commit history (I&amp;rsquo;ll leave the reason as an exercise
for the reader). Ignore this file by adding &amp;ldquo;InfoPlist.h&amp;rdquo; to &lt;em&gt;.gitignore&lt;/em&gt; (or
that of your other VCS).&lt;/p&gt;

&lt;p&gt;To recap, when you build the project now, Xcode will find out how many commits
are in the history, define it in a header file as &lt;code&gt;BUILD_NUMBER&lt;/code&gt;, which gets
used as the build number. As long as you keep with with version control, the
build number problem goes away.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>